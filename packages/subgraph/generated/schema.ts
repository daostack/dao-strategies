// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Campaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Campaign entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Campaign", id.toString(), this);
    }
  }

  static load(id: string): Campaign | null {
    return changetype<Campaign | null>(store.get("Campaign", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(<Bytes>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get sharesRoot(): Bytes | null {
    let value = this.get("sharesRoot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sharesRoot(value: Bytes | null) {
    if (!value) {
      this.unset("sharesRoot");
    } else {
      this.set("sharesRoot", Value.fromBytes(<Bytes>value));
    }
  }

  get sharesTotal(): BigInt | null {
    let value = this.get("sharesTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sharesTotal(value: BigInt | null) {
    if (!value) {
      this.unset("sharesTotal");
    } else {
      this.set("sharesTotal", Value.fromBigInt(<BigInt>value));
    }
  }

  get uri(): Bytes | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uri(value: Bytes | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromBytes(<Bytes>value));
    }
  }

  get guardian(): Bytes | null {
    let value = this.get("guardian");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set guardian(value: Bytes | null) {
    if (!value) {
      this.unset("guardian");
    } else {
      this.set("guardian", Value.fromBytes(<Bytes>value));
    }
  }

  get oracle(): Bytes | null {
    let value = this.get("oracle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set oracle(value: Bytes | null) {
    if (!value) {
      this.unset("oracle");
    } else {
      this.set("oracle", Value.fromBytes(<Bytes>value));
    }
  }

  get sharesPublished(): boolean {
    let value = this.get("sharesPublished");
    return value!.toBoolean();
  }

  set sharesPublished(value: boolean) {
    this.set("sharesPublished", Value.fromBoolean(value));
  }

  get claimPeriodStart(): BigInt | null {
    let value = this.get("claimPeriodStart");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set claimPeriodStart(value: BigInt | null) {
    if (!value) {
      this.unset("claimPeriodStart");
    } else {
      this.set("claimPeriodStart", Value.fromBigInt(<BigInt>value));
    }
  }
}
