{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_masterErc20",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_masterEth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCampaign",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "Erc20CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCampaign",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "EthCampaignCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "master",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "campaignAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "createErc20Campaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "createEthCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "erc20CampaignAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "ethCampaignAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5d4db0a359d573ab728708f20b2d9bae6dfbab9592c20f7c44371d0b7ee7ea6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "414071",
    "logsBloom": "0x
    "blockHash": "0xacda73db24e34430234798197eed8151148685b4f299d88bef205a620eb3f8ca",
    "transactionHash": "0xb5d4db0a359d573ab728708f20b2d9bae6dfbab9592c20f7c44371d0b7ee7ea6",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "414071",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "93b229d181261a5db2a6ad430518f34b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_masterErc20\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_masterEth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCampaign\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"Erc20CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCampaign\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"EthCampaignCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"campaignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"createErc20Campaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createEthCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"erc20CampaignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ethCampaignAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CampaignFactory.sol\":\"CampaignFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"contracts/CampaignFactory.sol\":{\"content\":\"//// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./erc20-campaign/Erc20Campaign.sol\\\";\\nimport \\\"./eth-campaign/EthCampaign.sol\\\";\\n\\ncontract CampaignFactory {\\n    Erc20Campaign private masterErc20;\\n    EthCampaign private masterEth;\\n\\n    event Erc20CampaignCreated(\\n        address creator,\\n        address newCampaign,\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _sharesUri,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        IERC20 _rewardToken,\\n        bytes32 salt\\n    );\\n\\n    event EthCampaignCreated(\\n        address creator,\\n        address newCampaign,\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _sharesUri,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        bytes32 salt\\n    );\\n\\n    constructor(address payable _masterErc20, address payable _masterEth) {\\n        masterErc20 = Erc20Campaign(_masterErc20);\\n        masterEth = EthCampaign(_masterEth);\\n    }\\n\\n    function ethCampaignAddress(bytes32 salt) public view returns (address) {\\n        return campaignAddress(address(masterEth), salt);\\n    }\\n\\n    function erc20CampaignAddress(bytes32 salt) public view returns (address) {\\n        return campaignAddress(address(masterErc20), salt);\\n    }\\n\\n    function campaignAddress(address master, bytes32 salt) public view returns (address) {\\n        return Clones.predictDeterministicAddress(address(master), salt);\\n    }\\n\\n    function createErc20Campaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _sharesUri,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        bytes32 salt,\\n        IERC20 _rewardToken\\n    ) external {\\n        address payable proxy = payable(Clones.cloneDeterministic(address(masterErc20), salt));\\n        Erc20Campaign(proxy).initErc20Campaign(_sharesMerkleRoot, _strategyUri, _guardian, _oracle, _rewardToken);\\n\\n        emit Erc20CampaignCreated(msg.sender, proxy, _sharesMerkleRoot, _sharesUri, _strategyUri, _guardian, _oracle, _rewardToken, salt);\\n    }\\n\\n    function createEthCampaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _sharesUri,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        bytes32 salt\\n    ) external {\\n        address payable proxy = payable(Clones.cloneDeterministic(address(masterEth), salt));\\n        EthCampaign(proxy).initEthCampaign(_sharesMerkleRoot, _strategyUri, _guardian, _oracle);\\n\\n        emit EthCampaignCreated(msg.sender, proxy, _sharesMerkleRoot, _sharesUri, _strategyUri, _guardian, _oracle, salt);\\n    }\\n}\\n\",\"keccak256\":\"0xc3707e56f71930e64b0e9e54e27cd1180ec5ee510bf518a92751af4ef5ee0a03\",\"license\":\"MIT\"},\"contracts/abstract/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Campaign\\n */\\nabstract contract Campaign is Initializable {\\n    /** Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 */\\n    uint256 public constant TOTAL_SHARES = 10**18;\\n    uint256 public constant CHALLENGE_PERIOD = 604800;\\n\\n    enum ChallengeAction {\\n        CancelPending,\\n        CacncelPendingAndLockCurrent,\\n        CancelCampaign\\n    }\\n\\n    bytes32 public approvedMerkleRoot;\\n\\n    /** Optimistic flow used to update merkleRoot.\\n     * - Oracle propose update and Guardian can block\\n     * - Guardian cannot initiate an update */\\n    bytes32 public pendingMerkleRoot;\\n    uint256 public activationTime;\\n\\n    bytes32 public strategyUri;\\n    address public guardian;\\n    address public oracle;\\n\\n    /** Counters of the total amount of funds provided by all providers\\n     * and claimed by all claimers */\\n    uint256 public totalReward;\\n    uint256 public totalClaimed;\\n\\n    /** Once locked, the merkleRoot cannot be updated anymore.\\n     * Once locked, it cannot be un-locked  */\\n    bool public locked;\\n\\n    mapping(address => uint256) public claimed;\\n    mapping(address => uint256) public providers;\\n\\n    event SharesMerkleRoot(bytes32 sharesMerkleRoot, bytes32 sharesUri, uint256 activationTime);\\n    event Claim(address account, uint256 share, uint256 reward);\\n    event Challenge(ChallengeAction action);\\n    event Withdraw(address account, uint256 amount);\\n\\n    error InvalidProof();\\n    error ActiveChallengePeriod();\\n    error NoRewardAvailable();\\n    error OnlyGuardian();\\n    error WithdrawalNotAllowed();\\n    error ClaimingNotAllowed();\\n    error NoFunds();\\n    error OnlyOracle();\\n    error Locked();\\n    error OnlyInChallengePeriod();\\n\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian) {\\n            revert OnlyGuardian();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        if (msg.sender != oracle) {\\n            revert OnlyOracle();\\n        }\\n        _;\\n    }\\n\\n    modifier notLocked() {\\n        if (locked) {\\n            revert Locked();\\n        }\\n        _;\\n    }\\n\\n    /** called at deploy (using the campaign factory). It may or may not\\n     * include a non-zero merkleRoot */\\n    function initCampaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle\\n    ) public initializer {\\n        strategyUri = _strategyUri;\\n        guardian = _guardian;\\n        oracle = _oracle;\\n\\n        if (_sharesMerkleRoot != bytes32(0)) {\\n            pendingMerkleRoot = _sharesMerkleRoot;\\n            activationTime = block.timestamp + CHALLENGE_PERIOD;\\n        } else {\\n            activationTime = type(uint256).max;\\n        }\\n    }\\n\\n    /** Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only\\n     * after a CHALLENGE_PERIOD */\\n    function proposeShares(bytes32 _sharesMerkleRoot, bytes32 _sharesUri) external onlyOracle notLocked {\\n        if (pendingMerkleRoot != bytes32(0) && block.timestamp < activationTime) {\\n            revert ActiveChallengePeriod();\\n        }\\n\\n        approvedMerkleRoot = pendingMerkleRoot;\\n        pendingMerkleRoot = _sharesMerkleRoot;\\n        activationTime = block.timestamp + CHALLENGE_PERIOD;\\n\\n        emit SharesMerkleRoot(_sharesMerkleRoot, _sharesUri, activationTime);\\n    }\\n\\n    /** Valid root is either the approved or pending one depending on the activation time */\\n    function getValidRoot() public view returns (bytes32 root) {\\n        return block.timestamp > activationTime ? pendingMerkleRoot : approvedMerkleRoot;\\n    }\\n\\n    /** Total funds received by the contract */\\n    function totalFundsReceived() public view returns (uint256 total) {\\n        return totalReward + totalClaimed;\\n    }\\n\\n    /** Validates the shares of an account and computes the available rewards it */\\n    function rewardsAvailableToClaimer(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) public view returns (uint256 total) {\\n        bytes32 claimingMerkleRoot = getValidRoot();\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(account, share));\\n        if (MerkleProof.verify(proof, claimingMerkleRoot, leaf) == false) {\\n            revert InvalidProof();\\n        }\\n        /** Rewards by claimer are a portion of the total funds received. If new funds are received, new rewards will become available */\\n        return (totalFundsReceived() * share) / TOTAL_SHARES - claimed[account];\\n    }\\n\\n    /** Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) proportional */\\n    function claim(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) external {\\n        uint256 reward = rewardsAvailableToClaimer(account, share, proof);\\n        if (reward == 0) {\\n            revert NoRewardAvailable();\\n        }\\n        claimed[account] += reward;\\n        totalClaimed += reward;\\n        totalReward -= reward;\\n\\n        transferValueOut(account, reward);\\n\\n        emit Claim(account, share, reward);\\n    }\\n\\n    function setLock(bool _lock) external onlyGuardian {\\n        locked = _lock;\\n    }\\n\\n    function challenge(ChallengeAction action) external onlyGuardian notLocked {\\n        if (pendingMerkleRoot != bytes32(0) && block.timestamp > activationTime) {\\n            revert OnlyInChallengePeriod();\\n        }\\n\\n        pendingMerkleRoot = bytes32(0);\\n        activationTime = type(uint256).max;\\n        if (action == ChallengeAction.CacncelPendingAndLockCurrent) {\\n            this.setLock(true);\\n        } else if (action == ChallengeAction.CancelCampaign) {\\n            this.setLock(true);\\n            approvedMerkleRoot = bytes32(0);\\n        }\\n\\n        emit Challenge(action);\\n    }\\n\\n    function withdrawFunds(address account) external {\\n        if (locked && approvedMerkleRoot == bytes32(0)) {\\n            uint256 amount = providers[account] / totalReward;\\n            if (amount == 0) {\\n                revert NoFunds();\\n            }\\n            providers[account] = 0;\\n\\n            transferValueOut(account, amount);\\n\\n            emit Withdraw(account, amount);\\n        } else {\\n            revert WithdrawalNotAllowed();\\n        }\\n    }\\n\\n    /**\\n    @dev recerts on failure\\n     */\\n    function transferValueOut(address to, uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x5e7faa0ce80ec86875d937f9b36a995206269116e98014aaf0f61df3b00105c1\",\"license\":\"MIT\"},\"contracts/erc20-campaign/Erc20Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../abstract/Campaign.sol\\\";\\n\\n/**\\n * @title Erc20Campaign\\n */\\ncontract Erc20Campaign is Campaign {\\n    using SafeERC20 for IERC20;\\n    IERC20 public rewardToken;\\n\\n    event ValueIn(address provider, uint256 amount);\\n\\n    function initErc20Campaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        IERC20 _rewardToken\\n    ) public {\\n        super.initCampaign(_sharesMerkleRoot, _strategyUri, _guardian, _oracle);\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function transferValueIn(uint256 amount) external {\\n        providers[msg.sender] += amount;\\n        totalReward += amount;\\n        rewardToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit ValueIn(msg.sender, amount);\\n    }\\n\\n    function transferValueOut(address to, uint256 amount) internal override {\\n        rewardToken.safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xfd96dc0a670e235b05ff84cc257c5ce5f267cdc64b99902c86731f07b1d4e9d3\",\"license\":\"MIT\"},\"contracts/eth-campaign/EthCampaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../abstract/Campaign.sol\\\";\\n\\n/**\\n * @title EthCampaign\\n */\\ncontract EthCampaign is Campaign {\\n    event ValueIn(address provider, uint256 amount);\\n\\n    function initEthCampaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle\\n    ) public {\\n        super.initCampaign(_sharesMerkleRoot, _strategyUri, _guardian, _oracle);\\n    }\\n\\n    receive() external payable {\\n        providers[msg.sender] += msg.value;\\n        totalReward += msg.value;\\n\\n        emit ValueIn(msg.sender, msg.value);\\n    }\\n\\n    function transferValueOut(address to, uint256 amount) internal override {\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"ether transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x46e57180354b1e577c32e085336df78aa7ea23f7a6ec43ea6fda959f5f5cc4d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161066938038061066983398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6105ab806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631cea85c21461005c57806334a065091461008b578063873460441461009e578063be9b43ff146100b3578063fa6cb749146100c6575b600080fd5b61006f61006a366004610474565b6100d9565b6040516001600160a01b03909116815260200160405180910390f35b61006f610099366004610474565b6100f8565b6100b16100ac36600461048d565b61010f565b005b6100b16100c13660046104eb565b610215565b61006f6100d4366004610448565b61032b565b6001546000906100f2906001600160a01b03168361032b565b92915050565b600080546100f2906001600160a01b03168361032b565b600154600090610128906001600160a01b03168361033e565b604051634009634160e01b815260048101899052602481018790526001600160a01b038681166044830152858116606483015291925090821690634009634190608401600060405180830381600087803b15801561018557600080fd5b505af1158015610199573d6000803e3d6000fd5b5050604080513381526001600160a01b0385811660208301528183018c9052606082018b9052608082018a905288811660a0830152871660c082015260e0810186905290517f7ed37899a5d13d5f546fda9e8e656994de9b5ca6a6c791ee84d616514fea5fd3935090819003610100019150a150505050505050565b6000805461022c906001600160a01b03168461033e565b6040516329cbe05160e01b8152600481018a9052602481018890526001600160a01b03878116604483015286811660648301528481166084830152919250908216906329cbe0519060a401600060405180830381600087803b15801561029157600080fd5b505af11580156102a5573d6000803e3d6000fd5b5050604080513381526001600160a01b0385811660208301528183018d9052606082018c9052608082018b905289811660a083015288811660c0830152861660e0820152610100810187905290517f15c84711d61b609d0246a3adc5621e9fde6e108e26fee2db1c7149c4e723177e935090819003610120019150a15050505050505050565b600061033783836103e2565b9392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166100f25760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b6000610337838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000806040838503121561045b57600080fd5b82356104668161055d565b946020939093013593505050565b60006020828403121561048657600080fd5b5035919050565b60008060008060008060c087890312156104a657600080fd5b86359550602087013594506040870135935060608701356104c68161055d565b925060808701356104d68161055d565b8092505060a087013590509295509295509295565b600080600080600080600060e0888a03121561050657600080fd5b87359650602088013595506040880135945060608801356105268161055d565b935060808801356105368161055d565b925060a0880135915060c088013561054d8161055d565b8091505092959891949750929550565b6001600160a01b038116811461057257600080fd5b5056fea26469706673582212201c245a255e0e6118dc6d7b4d8a86177458f9f41c7ec03a9db5b5ff793f8573fe64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631cea85c21461005c57806334a065091461008b578063873460441461009e578063be9b43ff146100b3578063fa6cb749146100c6575b600080fd5b61006f61006a366004610474565b6100d9565b6040516001600160a01b03909116815260200160405180910390f35b61006f610099366004610474565b6100f8565b6100b16100ac36600461048d565b61010f565b005b6100b16100c13660046104eb565b610215565b61006f6100d4366004610448565b61032b565b6001546000906100f2906001600160a01b03168361032b565b92915050565b600080546100f2906001600160a01b03168361032b565b600154600090610128906001600160a01b03168361033e565b604051634009634160e01b815260048101899052602481018790526001600160a01b038681166044830152858116606483015291925090821690634009634190608401600060405180830381600087803b15801561018557600080fd5b505af1158015610199573d6000803e3d6000fd5b5050604080513381526001600160a01b0385811660208301528183018c9052606082018b9052608082018a905288811660a0830152871660c082015260e0810186905290517f7ed37899a5d13d5f546fda9e8e656994de9b5ca6a6c791ee84d616514fea5fd3935090819003610100019150a150505050505050565b6000805461022c906001600160a01b03168461033e565b6040516329cbe05160e01b8152600481018a9052602481018890526001600160a01b03878116604483015286811660648301528481166084830152919250908216906329cbe0519060a401600060405180830381600087803b15801561029157600080fd5b505af11580156102a5573d6000803e3d6000fd5b5050604080513381526001600160a01b0385811660208301528183018d9052606082018c9052608082018b905289811660a083015288811660c0830152861660e0820152610100810187905290517f15c84711d61b609d0246a3adc5621e9fde6e108e26fee2db1c7149c4e723177e935090819003610120019150a15050505050505050565b600061033783836103e2565b9392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166100f25760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b6000610337838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b6000806040838503121561045b57600080fd5b82356104668161055d565b946020939093013593505050565b60006020828403121561048657600080fd5b5035919050565b60008060008060008060c087890312156104a657600080fd5b86359550602087013594506040870135935060608701356104c68161055d565b925060808701356104d68161055d565b8092505060a087013590509295509295509295565b600080600080600080600060e0888a03121561050657600080fd5b87359650602088013595506040880135945060608801356105268161055d565b935060808801356105368161055d565b925060a0880135915060c088013561054d8161055d565b8091505092959891949750929550565b6001600160a01b038116811461057257600080fd5b5056fea26469706673582212201c245a255e0e6118dc6d7b4d8a86177458f9f41c7ec03a9db5b5ff793f8573fe64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1553,
        "contract": "contracts/CampaignFactory.sol:CampaignFactory",
        "label": "masterErc20",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Erc20Campaign)2398"
      },
      {
        "astId": 1556,
        "contract": "contracts/CampaignFactory.sol:CampaignFactory",
        "label": "masterEth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(EthCampaign)2595"
      }
    ],
    "types": {
      "t_contract(Erc20Campaign)2398": {
        "encoding": "inplace",
        "label": "contract Erc20Campaign",
        "numberOfBytes": "20"
      },
      "t_contract(EthCampaign)2595": {
        "encoding": "inplace",
        "label": "contract EthCampaign",
        "numberOfBytes": "20"
      }
    }
  }
}