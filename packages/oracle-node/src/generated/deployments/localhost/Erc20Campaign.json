{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "ActiveChallengePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimingNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Locked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyInChallengePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Campaign.ChallengeAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "Challenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sharesUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activationTime",
          "type": "uint256"
        }
      ],
      "name": "SharesMerkleRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ValueIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Campaign.ChallengeAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "initCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "initErc20Campaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        }
      ],
      "name": "proposeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "providers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "rewardsAvailableToClaimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        }
      ],
      "name": "setLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyUri",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFundsReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferValueIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1dd8357519921a91b907e9b193ccbf1073025a2530378a492efa076a3c895fb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1082624",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd25067a714fdb20aac13913554314b04ccfbd4a673f5f494f58516827cd59ce0",
    "transactionHash": "0xf1dd8357519921a91b907e9b193ccbf1073025a2530378a492efa076a3c895fb",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1082624",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "93b229d181261a5db2a6ad430518f34b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActiveChallengePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimingNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyInChallengePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Campaign.ChallengeAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"Challenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sharesMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sharesUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"}],\"name\":\"SharesMerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValueIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Campaign.ChallengeAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"initErc20Campaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"}],\"name\":\"proposeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"rewardsAvailableToClaimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyUri\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferValueIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Erc20Campaign\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"TOTAL_SHARES()\":{\"notice\":\"Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 \"},\"claim(address,uint256,bytes32[])\":{\"notice\":\"Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) proportional \"},\"getValidRoot()\":{\"notice\":\"Valid root is either the approved or pending one depending on the activation time \"},\"initCampaign(bytes32,bytes32,address,address)\":{\"notice\":\"called at deploy (using the campaign factory). It may or may not include a non-zero merkleRoot \"},\"locked()\":{\"notice\":\"Once locked, the merkleRoot cannot be updated anymore. Once locked, it cannot be un-locked  \"},\"pendingMerkleRoot()\":{\"notice\":\"Optimistic flow used to update merkleRoot. - Oracle propose update and Guardian can block - Guardian cannot initiate an update \"},\"proposeShares(bytes32,bytes32)\":{\"notice\":\"Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only after a CHALLENGE_PERIOD \"},\"rewardsAvailableToClaimer(address,uint256,bytes32[])\":{\"notice\":\"Validates the shares of an account and computes the available rewards it \"},\"totalFundsReceived()\":{\"notice\":\"Total funds received by the contract \"},\"totalReward()\":{\"notice\":\"Counters of the total amount of funds provided by all providers and claimed by all claimers \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc20-campaign/Erc20Campaign.sol\":\"Erc20Campaign\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"contracts/abstract/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Campaign\\n */\\nabstract contract Campaign is Initializable {\\n    /** Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 */\\n    uint256 public constant TOTAL_SHARES = 10**18;\\n    uint256 public constant CHALLENGE_PERIOD = 604800;\\n\\n    enum ChallengeAction {\\n        CancelPending,\\n        CacncelPendingAndLockCurrent,\\n        CancelCampaign\\n    }\\n\\n    bytes32 public approvedMerkleRoot;\\n\\n    /** Optimistic flow used to update merkleRoot.\\n     * - Oracle propose update and Guardian can block\\n     * - Guardian cannot initiate an update */\\n    bytes32 public pendingMerkleRoot;\\n    uint256 public activationTime;\\n\\n    bytes32 public strategyUri;\\n    address public guardian;\\n    address public oracle;\\n\\n    /** Counters of the total amount of funds provided by all providers\\n     * and claimed by all claimers */\\n    uint256 public totalReward;\\n    uint256 public totalClaimed;\\n\\n    /** Once locked, the merkleRoot cannot be updated anymore.\\n     * Once locked, it cannot be un-locked  */\\n    bool public locked;\\n\\n    mapping(address => uint256) public claimed;\\n    mapping(address => uint256) public providers;\\n\\n    event SharesMerkleRoot(bytes32 sharesMerkleRoot, bytes32 sharesUri, uint256 activationTime);\\n    event Claim(address account, uint256 share, uint256 reward);\\n    event Challenge(ChallengeAction action);\\n    event Withdraw(address account, uint256 amount);\\n\\n    error InvalidProof();\\n    error ActiveChallengePeriod();\\n    error NoRewardAvailable();\\n    error OnlyGuardian();\\n    error WithdrawalNotAllowed();\\n    error ClaimingNotAllowed();\\n    error NoFunds();\\n    error OnlyOracle();\\n    error Locked();\\n    error OnlyInChallengePeriod();\\n\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian) {\\n            revert OnlyGuardian();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        if (msg.sender != oracle) {\\n            revert OnlyOracle();\\n        }\\n        _;\\n    }\\n\\n    modifier notLocked() {\\n        if (locked) {\\n            revert Locked();\\n        }\\n        _;\\n    }\\n\\n    /** called at deploy (using the campaign factory). It may or may not\\n     * include a non-zero merkleRoot */\\n    function initCampaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle\\n    ) public initializer {\\n        strategyUri = _strategyUri;\\n        guardian = _guardian;\\n        oracle = _oracle;\\n\\n        if (_sharesMerkleRoot != bytes32(0)) {\\n            pendingMerkleRoot = _sharesMerkleRoot;\\n            activationTime = block.timestamp + CHALLENGE_PERIOD;\\n        } else {\\n            activationTime = type(uint256).max;\\n        }\\n    }\\n\\n    /** Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only\\n     * after a CHALLENGE_PERIOD */\\n    function proposeShares(bytes32 _sharesMerkleRoot, bytes32 _sharesUri) external onlyOracle notLocked {\\n        if (pendingMerkleRoot != bytes32(0) && block.timestamp < activationTime) {\\n            revert ActiveChallengePeriod();\\n        }\\n\\n        approvedMerkleRoot = pendingMerkleRoot;\\n        pendingMerkleRoot = _sharesMerkleRoot;\\n        activationTime = block.timestamp + CHALLENGE_PERIOD;\\n\\n        emit SharesMerkleRoot(_sharesMerkleRoot, _sharesUri, activationTime);\\n    }\\n\\n    /** Valid root is either the approved or pending one depending on the activation time */\\n    function getValidRoot() public view returns (bytes32 root) {\\n        return block.timestamp > activationTime ? pendingMerkleRoot : approvedMerkleRoot;\\n    }\\n\\n    /** Total funds received by the contract */\\n    function totalFundsReceived() public view returns (uint256 total) {\\n        return totalReward + totalClaimed;\\n    }\\n\\n    /** Validates the shares of an account and computes the available rewards it */\\n    function rewardsAvailableToClaimer(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) public view returns (uint256 total) {\\n        bytes32 claimingMerkleRoot = getValidRoot();\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(account, share));\\n        if (MerkleProof.verify(proof, claimingMerkleRoot, leaf) == false) {\\n            revert InvalidProof();\\n        }\\n        /** Rewards by claimer are a portion of the total funds received. If new funds are received, new rewards will become available */\\n        return (totalFundsReceived() * share) / TOTAL_SHARES - claimed[account];\\n    }\\n\\n    /** Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) proportional */\\n    function claim(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) external {\\n        uint256 reward = rewardsAvailableToClaimer(account, share, proof);\\n        if (reward == 0) {\\n            revert NoRewardAvailable();\\n        }\\n        claimed[account] += reward;\\n        totalClaimed += reward;\\n        totalReward -= reward;\\n\\n        transferValueOut(account, reward);\\n\\n        emit Claim(account, share, reward);\\n    }\\n\\n    function setLock(bool _lock) external onlyGuardian {\\n        locked = _lock;\\n    }\\n\\n    function challenge(ChallengeAction action) external onlyGuardian notLocked {\\n        if (pendingMerkleRoot != bytes32(0) && block.timestamp > activationTime) {\\n            revert OnlyInChallengePeriod();\\n        }\\n\\n        pendingMerkleRoot = bytes32(0);\\n        activationTime = type(uint256).max;\\n        if (action == ChallengeAction.CacncelPendingAndLockCurrent) {\\n            this.setLock(true);\\n        } else if (action == ChallengeAction.CancelCampaign) {\\n            this.setLock(true);\\n            approvedMerkleRoot = bytes32(0);\\n        }\\n\\n        emit Challenge(action);\\n    }\\n\\n    function withdrawFunds(address account) external {\\n        if (locked && approvedMerkleRoot == bytes32(0)) {\\n            uint256 amount = providers[account] / totalReward;\\n            if (amount == 0) {\\n                revert NoFunds();\\n            }\\n            providers[account] = 0;\\n\\n            transferValueOut(account, amount);\\n\\n            emit Withdraw(account, amount);\\n        } else {\\n            revert WithdrawalNotAllowed();\\n        }\\n    }\\n\\n    /**\\n    @dev recerts on failure\\n     */\\n    function transferValueOut(address to, uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x5e7faa0ce80ec86875d937f9b36a995206269116e98014aaf0f61df3b00105c1\",\"license\":\"MIT\"},\"contracts/erc20-campaign/Erc20Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../abstract/Campaign.sol\\\";\\n\\n/**\\n * @title Erc20Campaign\\n */\\ncontract Erc20Campaign is Campaign {\\n    using SafeERC20 for IERC20;\\n    IERC20 public rewardToken;\\n\\n    event ValueIn(address provider, uint256 amount);\\n\\n    function initErc20Campaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        IERC20 _rewardToken\\n    ) public {\\n        super.initCampaign(_sharesMerkleRoot, _strategyUri, _guardian, _oracle);\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function transferValueIn(uint256 amount) external {\\n        providers[msg.sender] += amount;\\n        totalReward += amount;\\n        rewardToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit ValueIn(msg.sender, amount);\\n    }\\n\\n    function transferValueOut(address to, uint256 amount) internal override {\\n        rewardToken.safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xfd96dc0a670e235b05ff84cc257c5ce5f267cdc64b99902c86731f07b1d4e9d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061129f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80637dc0d1d0116100de578063c3a079ed11610097578063d3f3235711610071578063d3f323571461030d578063d54ad2a114610320578063da4493f614610329578063f7c618c11461033257600080fd5b8063c3a079ed146102c6578063c884ef83146102d0578063cf309012146102f057600080fd5b80637dc0d1d01461027757806385e3f9971461028a5780639637f47514610299578063a9ec3a1b146102a2578063b4f205be146102ab578063bf27f585146102be57600080fd5b8063619d519411610130578063619d51941461022457806368742da614610237578063717f90921461024a578063750142e61461025357806375e07c2d1461025c5780637d1881381461026457600080fd5b80630787bc271461017857806317b9d05e146101ab57806329cbe051146101c05780633d13f874146101d3578063414f33dd146101e6578063452a9320146101f9575b600080fd5b610198610186366004610ea0565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b6101be6101b9366004610f83565b610345565b005b6101be6101ce366004610fef565b610427565b6101be6101e1366004610ebd565b610459565b6101be6101f4366004610fa5565b610543565b60055461020c906001600160a01b031681565b6040516001600160a01b0390911681526020016101a2565b6101be610232366004610f49565b61060c565b6101be610245366004610ea0565b61064a565b61019860045481565b61019860075481565b610198610726565b6101be61027236600461106f565b610741565b60065461020c906001600160a01b031681565b610198670de0b6b3a764000081565b61019860025481565b61019860015481565b6101986102b9366004610ebd565b6107d3565b6101986108d3565b61019862093a8081565b6101986102de366004610ea0565b600a6020526000908152604090205481565b6009546102fd9060ff1681565b60405190151581526020016101a2565b6101be61031b36600461104e565b6108e5565b61019860085481565b61019860035481565b600c5461020c906001600160a01b031681565b6006546001600160a01b03163314610370576040516380fee10560e01b815260040160405180910390fd5b60095460ff1615610394576040516303cb96db60e21b815260040160405180910390fd5b600254158015906103a6575060035442105b156103c457604051633420251360e11b815260040160405180910390fd5b600280546001558290556103db62093a804261114d565b60038190556040805184815260208101849052908101919091527ff538af40d5ad77456cbcd96a5be317d724e66e0e08eb217c14812308bd43d35e906060015b60405180910390a15050565b61043385858585610543565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b6000610467858585856107d3565b90508061048757604051636d363c4560e01b815260040160405180910390fd5b6001600160a01b0385166000908152600a6020526040812080548392906104af90849061114d565b9250508190555080600860008282546104c8919061114d565b9250508190555080600760008282546104e191906111a6565b909155506104f190508582610a7f565b604080516001600160a01b0387168152602081018690529081018290527f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7906060015b60405180910390a15050505050565b600061054f6001610a9a565b90508015610567576000805461ff0019166101001790555b6004849055600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911691909117905584156105bc5760028590556105b462093a804261114d565b6003556105c3565b6000196003555b8015610605576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610534565b5050505050565b6005546001600160a01b0316331461063757604051636570ecab60e11b815260040160405180910390fd5b6009805460ff1916911515919091179055565b60095460ff16801561065c5750600154155b1561070a576007546001600160a01b0382166000908152600b6020526040812054909161068891611165565b9050806106a85760405163043f9e1160e41b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260408120556106cb8282610a7f565b604080516001600160a01b0384168152602081018390527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910161041b565b60405163209a769d60e11b815260040160405180910390fd5b50565b60006003544211610738575060015490565b6002545b905090565b336000908152600b60205260408120805483929061076090849061114d565b925050819055508060076000828254610779919061114d565b9091555050600c54610796906001600160a01b0316333084610b2b565b60408051338152602081018390527fa8044513073c23047a922f0bf7142f18c341a73184b9f8055349b4415fb9d6ca91015b60405180910390a150565b6000806107de610726565b6040516bffffffffffffffffffffffff19606089901b16602082015260348101879052909150600090605401604051602081830303815290604052805190602001209050610862858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250859150610b9c9050565b61087f576040516309bde33960e01b815260040160405180910390fd5b6001600160a01b0387166000908152600a6020526040902054670de0b6b3a7640000876108aa6108d3565b6108b49190611187565b6108be9190611165565b6108c891906111a6565b979650505050505050565b600060085460075461073c919061114d565b6005546001600160a01b0316331461091057604051636570ecab60e11b815260040160405180910390fd5b60095460ff1615610934576040516303cb96db60e21b815260040160405180910390fd5b60025415801590610946575060035442115b1561096457604051631b69dd1760e21b815260040160405180910390fd5b600060025560001960035560018160028111156109835761098361121a565b14156109df57604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b1580156109c257600080fd5b505af11580156109d6573d6000803e3d6000fd5b50505050610a50565b60028160028111156109f3576109f361121a565b1415610a5057604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b5050600060015550505b7f0b700a39eebc9d322d0a5829d3d6447d9e000f73a89a7baa6a0fa28a5ec9c8d0816040516107c891906110a4565b600c54610a96906001600160a01b03168383610bb4565b5050565b60008054610100900460ff1615610aea578160ff166001148015610abd5750303b155b610ae25760405162461bcd60e51b8152600401610ad9906110ff565b60405180910390fd5b506000919050565b60005460ff808416911610610b115760405162461bcd60e51b8152600401610ad9906110ff565b506000805460ff191660ff92909216919091179055600190565b6040516001600160a01b0380851660248301528316604482015260648101829052610b969085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610be9565b50505050565b600082610ba98584610cbb565b1490505b9392505050565b6040516001600160a01b038316602482015260448101829052610be490849063a9059cbb60e01b90606401610b5f565b505050565b6000610c3e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d2f9092919063ffffffff16565b805190915015610be45780806020019051810190610c5c9190610f66565b610be45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ad9565b600081815b8451811015610d27576000858281518110610cdd57610cdd611230565b60200260200101519050808311610d035760008381526020829052604090209250610d14565b600081815260208490526040902092505b5080610d1f816111e9565b915050610cc0565b509392505050565b6060610d3e8484600085610d46565b949350505050565b606082471015610da75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ad9565b6001600160a01b0385163b610dfe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad9565b600080866001600160a01b03168587604051610e1a9190611088565b60006040518083038185875af1925050503d8060008114610e57576040519150601f19603f3d011682016040523d82523d6000602084013e610e5c565b606091505b50915091506108c882828660608315610e76575081610bad565b825115610e865782518084602001fd5b8160405162461bcd60e51b8152600401610ad991906110cc565b600060208284031215610eb257600080fd5b8135610bad81611246565b60008060008060608587031215610ed357600080fd5b8435610ede81611246565b935060208501359250604085013567ffffffffffffffff80821115610f0257600080fd5b818701915087601f830112610f1657600080fd5b813581811115610f2557600080fd5b8860208260051b8501011115610f3a57600080fd5b95989497505060200194505050565b600060208284031215610f5b57600080fd5b8135610bad8161125b565b600060208284031215610f7857600080fd5b8151610bad8161125b565b60008060408385031215610f9657600080fd5b50508035926020909101359150565b60008060008060808587031215610fbb57600080fd5b84359350602085013592506040850135610fd481611246565b91506060850135610fe481611246565b939692955090935050565b600080600080600060a0868803121561100757600080fd5b8535945060208601359350604086013561102081611246565b9250606086013561103081611246565b9150608086013561104081611246565b809150509295509295909350565b60006020828403121561106057600080fd5b813560038110610bad57600080fd5b60006020828403121561108157600080fd5b5035919050565b6000825161109a8184602087016111bd565b9190910192915050565b60208101600383106110c657634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526110eb8160408501602087016111bd565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561116057611160611204565b500190565b60008261118257634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156111a1576111a1611204565b500290565b6000828210156111b8576111b8611204565b500390565b60005b838110156111d85781810151838201526020016111c0565b83811115610b965750506000910152565b60006000198214156111fd576111fd611204565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461072357600080fd5b801515811461072357600080fdfea2646970667358221220f4c8f91e054ae91c3951c9d22bc88c80c440ae7676fede7e79c75b4a4ecf4e0a64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80637dc0d1d0116100de578063c3a079ed11610097578063d3f3235711610071578063d3f323571461030d578063d54ad2a114610320578063da4493f614610329578063f7c618c11461033257600080fd5b8063c3a079ed146102c6578063c884ef83146102d0578063cf309012146102f057600080fd5b80637dc0d1d01461027757806385e3f9971461028a5780639637f47514610299578063a9ec3a1b146102a2578063b4f205be146102ab578063bf27f585146102be57600080fd5b8063619d519411610130578063619d51941461022457806368742da614610237578063717f90921461024a578063750142e61461025357806375e07c2d1461025c5780637d1881381461026457600080fd5b80630787bc271461017857806317b9d05e146101ab57806329cbe051146101c05780633d13f874146101d3578063414f33dd146101e6578063452a9320146101f9575b600080fd5b610198610186366004610ea0565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b6101be6101b9366004610f83565b610345565b005b6101be6101ce366004610fef565b610427565b6101be6101e1366004610ebd565b610459565b6101be6101f4366004610fa5565b610543565b60055461020c906001600160a01b031681565b6040516001600160a01b0390911681526020016101a2565b6101be610232366004610f49565b61060c565b6101be610245366004610ea0565b61064a565b61019860045481565b61019860075481565b610198610726565b6101be61027236600461106f565b610741565b60065461020c906001600160a01b031681565b610198670de0b6b3a764000081565b61019860025481565b61019860015481565b6101986102b9366004610ebd565b6107d3565b6101986108d3565b61019862093a8081565b6101986102de366004610ea0565b600a6020526000908152604090205481565b6009546102fd9060ff1681565b60405190151581526020016101a2565b6101be61031b36600461104e565b6108e5565b61019860085481565b61019860035481565b600c5461020c906001600160a01b031681565b6006546001600160a01b03163314610370576040516380fee10560e01b815260040160405180910390fd5b60095460ff1615610394576040516303cb96db60e21b815260040160405180910390fd5b600254158015906103a6575060035442105b156103c457604051633420251360e11b815260040160405180910390fd5b600280546001558290556103db62093a804261114d565b60038190556040805184815260208101849052908101919091527ff538af40d5ad77456cbcd96a5be317d724e66e0e08eb217c14812308bd43d35e906060015b60405180910390a15050565b61043385858585610543565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b6000610467858585856107d3565b90508061048757604051636d363c4560e01b815260040160405180910390fd5b6001600160a01b0385166000908152600a6020526040812080548392906104af90849061114d565b9250508190555080600860008282546104c8919061114d565b9250508190555080600760008282546104e191906111a6565b909155506104f190508582610a7f565b604080516001600160a01b0387168152602081018690529081018290527f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7906060015b60405180910390a15050505050565b600061054f6001610a9a565b90508015610567576000805461ff0019166101001790555b6004849055600580546001600160a01b038086166001600160a01b031992831617909255600680549285169290911691909117905584156105bc5760028590556105b462093a804261114d565b6003556105c3565b6000196003555b8015610605576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610534565b5050505050565b6005546001600160a01b0316331461063757604051636570ecab60e11b815260040160405180910390fd5b6009805460ff1916911515919091179055565b60095460ff16801561065c5750600154155b1561070a576007546001600160a01b0382166000908152600b6020526040812054909161068891611165565b9050806106a85760405163043f9e1160e41b815260040160405180910390fd5b6001600160a01b0382166000908152600b60205260408120556106cb8282610a7f565b604080516001600160a01b0384168152602081018390527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910161041b565b60405163209a769d60e11b815260040160405180910390fd5b50565b60006003544211610738575060015490565b6002545b905090565b336000908152600b60205260408120805483929061076090849061114d565b925050819055508060076000828254610779919061114d565b9091555050600c54610796906001600160a01b0316333084610b2b565b60408051338152602081018390527fa8044513073c23047a922f0bf7142f18c341a73184b9f8055349b4415fb9d6ca91015b60405180910390a150565b6000806107de610726565b6040516bffffffffffffffffffffffff19606089901b16602082015260348101879052909150600090605401604051602081830303815290604052805190602001209050610862858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250859150610b9c9050565b61087f576040516309bde33960e01b815260040160405180910390fd5b6001600160a01b0387166000908152600a6020526040902054670de0b6b3a7640000876108aa6108d3565b6108b49190611187565b6108be9190611165565b6108c891906111a6565b979650505050505050565b600060085460075461073c919061114d565b6005546001600160a01b0316331461091057604051636570ecab60e11b815260040160405180910390fd5b60095460ff1615610934576040516303cb96db60e21b815260040160405180910390fd5b60025415801590610946575060035442115b1561096457604051631b69dd1760e21b815260040160405180910390fd5b600060025560001960035560018160028111156109835761098361121a565b14156109df57604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b1580156109c257600080fd5b505af11580156109d6573d6000803e3d6000fd5b50505050610a50565b60028160028111156109f3576109f361121a565b1415610a5057604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b158015610a3257600080fd5b505af1158015610a46573d6000803e3d6000fd5b5050600060015550505b7f0b700a39eebc9d322d0a5829d3d6447d9e000f73a89a7baa6a0fa28a5ec9c8d0816040516107c891906110a4565b600c54610a96906001600160a01b03168383610bb4565b5050565b60008054610100900460ff1615610aea578160ff166001148015610abd5750303b155b610ae25760405162461bcd60e51b8152600401610ad9906110ff565b60405180910390fd5b506000919050565b60005460ff808416911610610b115760405162461bcd60e51b8152600401610ad9906110ff565b506000805460ff191660ff92909216919091179055600190565b6040516001600160a01b0380851660248301528316604482015260648101829052610b969085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610be9565b50505050565b600082610ba98584610cbb565b1490505b9392505050565b6040516001600160a01b038316602482015260448101829052610be490849063a9059cbb60e01b90606401610b5f565b505050565b6000610c3e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d2f9092919063ffffffff16565b805190915015610be45780806020019051810190610c5c9190610f66565b610be45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ad9565b600081815b8451811015610d27576000858281518110610cdd57610cdd611230565b60200260200101519050808311610d035760008381526020829052604090209250610d14565b600081815260208490526040902092505b5080610d1f816111e9565b915050610cc0565b509392505050565b6060610d3e8484600085610d46565b949350505050565b606082471015610da75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ad9565b6001600160a01b0385163b610dfe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad9565b600080866001600160a01b03168587604051610e1a9190611088565b60006040518083038185875af1925050503d8060008114610e57576040519150601f19603f3d011682016040523d82523d6000602084013e610e5c565b606091505b50915091506108c882828660608315610e76575081610bad565b825115610e865782518084602001fd5b8160405162461bcd60e51b8152600401610ad991906110cc565b600060208284031215610eb257600080fd5b8135610bad81611246565b60008060008060608587031215610ed357600080fd5b8435610ede81611246565b935060208501359250604085013567ffffffffffffffff80821115610f0257600080fd5b818701915087601f830112610f1657600080fd5b813581811115610f2557600080fd5b8860208260051b8501011115610f3a57600080fd5b95989497505060200194505050565b600060208284031215610f5b57600080fd5b8135610bad8161125b565b600060208284031215610f7857600080fd5b8151610bad8161125b565b60008060408385031215610f9657600080fd5b50508035926020909101359150565b60008060008060808587031215610fbb57600080fd5b84359350602085013592506040850135610fd481611246565b91506060850135610fe481611246565b939692955090935050565b600080600080600060a0868803121561100757600080fd5b8535945060208601359350604086013561102081611246565b9250606086013561103081611246565b9150608086013561104081611246565b809150509295509295909350565b60006020828403121561106057600080fd5b813560038110610bad57600080fd5b60006020828403121561108157600080fd5b5035919050565b6000825161109a8184602087016111bd565b9190910192915050565b60208101600383106110c657634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526110eb8160408501602087016111bd565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561116057611160611204565b500190565b60008261118257634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156111a1576111a1611204565b500290565b6000828210156111b8576111b8611204565b500390565b60005b838110156111d85781810151838201526020016111c0565b83811115610b965750506000910152565b60006000198214156111fd576111fd611204565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461072357600080fd5b801515811461072357600080fdfea2646970667358221220f4c8f91e054ae91c3951c9d22bc88c80c440ae7676fede7e79c75b4a4ecf4e0a64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Erc20Campaign",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "TOTAL_SHARES()": {
        "notice": "Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 "
      },
      "claim(address,uint256,bytes32[])": {
        "notice": "Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) proportional "
      },
      "getValidRoot()": {
        "notice": "Valid root is either the approved or pending one depending on the activation time "
      },
      "initCampaign(bytes32,bytes32,address,address)": {
        "notice": "called at deploy (using the campaign factory). It may or may not include a non-zero merkleRoot "
      },
      "locked()": {
        "notice": "Once locked, the merkleRoot cannot be updated anymore. Once locked, it cannot be un-locked  "
      },
      "pendingMerkleRoot()": {
        "notice": "Optimistic flow used to update merkleRoot. - Oracle propose update and Guardian can block - Guardian cannot initiate an update "
      },
      "proposeShares(bytes32,bytes32)": {
        "notice": "Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only after a CHALLENGE_PERIOD "
      },
      "rewardsAvailableToClaimer(address,uint256,bytes32[])": {
        "notice": "Validates the shares of an account and computes the available rewards it "
      },
      "totalFundsReceived()": {
        "notice": "Total funds received by the contract "
      },
      "totalReward()": {
        "notice": "Counters of the total amount of funds provided by all providers and claimed by all claimers "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 86,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 89,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1798,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "approvedMerkleRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1801,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "pendingMerkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1803,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "activationTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1805,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "strategyUri",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1807,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "guardian",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1809,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "oracle",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1812,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "totalReward",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1814,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1817,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "locked",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 1821,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "claimed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1825,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "providers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2312,
        "contract": "contracts/erc20-campaign/Erc20Campaign.sol:Erc20Campaign",
        "label": "rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)885"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)885": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}