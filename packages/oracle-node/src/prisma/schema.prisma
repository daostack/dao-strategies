datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Campaign {
  uri             String    @id
  title           String?  
  description     String?
  logoUrl         String?
  creator         User?     @relation(fields: [creatorId], references: [address])
  creatorId       String?    
  nonce           Int
  chainId         Int?      // store the ChainId as defined in wagmi defaultChains
  customAssets    String[]  // store the Asset id as defined in @dao-strategies/core ChainsDetails
  guardian        String?
  oracle          String?
  activationTime    Int?
  CHALLENGE_PERIOD  Int?
  ACTIVATION_PERIOD Int?
  ACTIVE_DURATION   Int?
  stratID         String
  stratParamsStr  String    // For now, Params are stringified as they can have any structure
  lastRunDate     BigInt?
  execDate        BigInt?
  publishDate     BigInt?
  republishDate   BigInt?   // set to schedule a republishing
  cancelDate      BigInt?
  registered      Boolean?  // Registered campaigns are those live (with a smart contract). 
  running         Boolean?  // running campaigns are currently being run (execution can take a few seconds or minutes)
  executed        Boolean?  // executed campaigns are those whose final rewards have been computed 
  published       Boolean?  // published campaigns are those whose shares has been published in their smart contract
  address         String?   // cannot be @unique since it is null for simulated campaigns - Smart contract address
  shares          Share[] 
  roots           CampaignRoot[] 
  fundEvents      FundEvent[]
  funders         CampaignFunder[]
  indexing        CampaignIndex[]
  valueLocked     Float?
}

enum CampaignState {
  PendingExecution
  PendingIdentityValidation
  MerkleRootSet
}

model User {
  address         String    @id
  created         Campaign[]
} 

// A table that stores the verified link between a user from a given platform to a user of another platform
// with a given intent. 
model CrossVerification {
  @@id([from, to, intent])
  from            String
  to              String
  intent          String
  proof           String
}

model Share {  
  @@id([campaignId, account])
  account         String
  amount          BigInt        
  campaign        Campaign  @relation(fields: [campaignId], references: [uri])
  campaignId      String
}

model CampaignRoot {
  @@id([campaignId, order])
  order           Int             // campaign roots are ordered from 0 to N
  campaign        Campaign  @relation(fields: [campaignId], references: [uri])
  campaignId      String
  root            String  
  date            BigInt
  leafs           BalanceLeaf[]   // Leafs are stored on a table to be efficiently read
}

model BalanceLeaf {
  @@id([campaignId, order, address])
  root            CampaignRoot  @relation(fields: [campaignId, order], references: [campaignId, order])
  campaignId      String
  order           Int           
  accounts        String[]       // the social account of the leaf is used to prevent double payments
  address         String
  balance         String
  proof           String[]      // Store the proofs so that they don't have to be recomputed eveytime they are needed
}

model AssetPrice {
  @@id([chainId, address])
  chainId         Int
  address         String
  price           Float
  lastUpdated     BigInt
}

model FundEvent {
  hash            String          @id
  campaign        Campaign        @relation(fields: [campaignId], references: [uri])
  campaignId      String
  funder          CampaignFunder? @relation(fields: [campaignId, funderAddress], references: [campaignId, address])
  funderAddress   String
  asset           String
  amount          String
  blockNumber     BigInt
}

// For each campaign, it stores which was the latest block it indexed a given property of the campaign
model CampaignIndex {
  @@id([campaignId])
  campaign        Campaign      @relation(fields: [campaignId], references: [uri])
  campaignId      String
  fundersBN       BigInt?
  tvlBN           BigInt?
}

model CampaignFunder {
  @@id([campaignId, address])
  campaign        Campaign      @relation(fields: [campaignId], references: [uri])
  campaignId      String
  address         String
  value           Float         // estimated dolar value of the funder contributions.
  events          FundEvent[]
}