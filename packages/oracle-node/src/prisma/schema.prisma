datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Campaign {
  uri             String    @id
  title           String  
  description     String
  creator         User      @relation(fields: [creatorId], references: [address])
  creatorId       String    
  nonce           Int
  chain           String    // store the ChainKey as defined in @dao-strategies/core ChainsDetails
  asset           String    // store the Asset key as defined in @dao-strategies/core ChainsDetails
  guardian        String
  oracle          String
  stratID         String
  stratParamsStr  String    // For now, Params are stringified as they can have any structure
  rewards         Reward[] 
  lastRunDate     BigInt?
  execDate        BigInt?
  publishDate     BigInt?
  cancelDate      BigInt?
  registered      Boolean   // Registered campaigns are those live (with a smart contract). 
  running         Boolean   // running campaigns are currently being run (execution can take a few seconds or minutes)
  executed        Boolean   // executed campaigns are those whose final rewards have been computed 
  published       Boolean   // published campaigns are those whose shares has been published in their smart contract
  address         String    // cannot be @unique since it is null for simulated campaigns - Smart contract address
}

enum CampaignState {
  PendingExecution
  PendingIdentityValidation
  MerkleRootSet
}

model User {
  address         String    @id
  verifiedGithub  String?
  signedGithub    String?
  created         Campaign[]
} 

model Reward {  
  @@id([campaignId, account])
  account         String
  amount          BigInt        
  campaign        Campaign  @relation(fields: [campaignId], references: [uri])
  campaignId      String
}
