/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Campaign, CampaignInterface } from "../Campaign";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_totalShares",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_rewardsCalculated",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "_strategyHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_evaluationPeriodDuration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidProof",
    type: "error",
  },
  {
    inputs: [],
    name: "NoFundsForAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoRewardAvailable",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyDuringEvaluationPeriod",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyGuardian",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "campaignCancelled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelCampaign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "share",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "evaluationPeriodEnd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "funds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "guardian",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsCalculated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "strategyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalClaimed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161099a38038061099a83398101604081905261002f9161008a565b61003981426100fa565b60045550600094909455600255600591909155600380546001600160a01b0319166001600160a01b03909316929092179091556006805461ff00191661010092151592909202919091179055610120565b60008060008060008060c087890312156100a357600080fd5b8651955060208701519450604087015180151581146100c157600080fd5b6060880151608089015191955093506001600160a01b03811681146100e557600080fd5b8092505060a087015190509295509295509295565b6000821982111561011b57634e487b7160e01b600052601160045260246000fd5b500190565b61086b8061012f6000396000f3fe6080604052600436106100e15760003560e01c80639ed3fa341161007f578063ce7c2ac211610059578063ce7c2ac21461026b578063d54ad2a114610298578063e2ae93fb146102ae578063f0b09d24146102db57600080fd5b80639ed3fa3414610209578063b80dea9714610228578063c884ef831461023e57600080fd5b8063452a9320116100bb578063452a93201461017257806363a5b88d146101aa57806368742da6146101d4578063980e7844146101f457600080fd5b806309823cde146101115780632eb4a7ab146101335780633a98ef391461015c57600080fd5b3661010c57336000908152600960205260408120805434929061010590849061077e565b9091555050005b600080fd5b34801561011d57600080fd5b5061013161012c3660046106f4565b6102f1565b005b34801561013f57600080fd5b5061014960055481565b6040519081526020015b60405180910390f35b34801561016857600080fd5b5061014960005481565b34801561017e57600080fd5b50600354610192906001600160a01b031681565b6040516001600160a01b039091168152602001610153565b3480156101b657600080fd5b506006546101c49060ff1681565b6040519015158152602001610153565b3480156101e057600080fd5b506101316101ef3660046106d2565b6104c0565b34801561020057600080fd5b506101316105a2565b34801561021557600080fd5b506006546101c490610100900460ff1681565b34801561023457600080fd5b5061014960045481565b34801561024a57600080fd5b506101496102593660046106d2565b60086020526000908152604090205481565b34801561027757600080fd5b506101496102863660046106d2565b60076020526000908152604090205481565b3480156102a457600080fd5b5061014960015481565b3480156102ba57600080fd5b506101496102c93660046106d2565b60096020526000908152604090205481565b3480156102e757600080fd5b5061014960025481565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000906054016040516020818303038152906040528051906020012090506103738383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060055491508490506105ff565b610390576040516309bde33960e01b815260040160405180910390fd5b6000600154476103a0919061077e565b6001600160a01b038716600090815260086020526040812054815492935090916103ca88856107b8565b6103d49190610796565b6103de91906107d7565b9050806103fe57604051636d363c4560e01b815260040160405180910390fd5b6001600160a01b0387166000908152600860205260408120805483929061042690849061077e565b92505081905550806001600082825461043f919061077e565b90915550506040516000906001600160a01b0389169083908381818185875af1925050503d806000811461048f576040519150601f19603f3d011682016040523d82523d6000602084013e610494565b606091505b50509050806104b65760405163078ecf4160e41b815260040160405180910390fd5b5050505050505050565b6104c8610615565b6104e55760405163209a769d60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600960205260409020548061051c57604051630db585ff60e01b815260040160405180910390fd5b6001600160a01b0382166000818152600960205260408082208290555190919083908381818185875af1925050503d8060008114610576576040519150601f19603f3d011682016040523d82523d6000602084013e61057b565b606091505b505090508061059d576040516369a4751b60e01b815260040160405180910390fd5b505050565b6003546001600160a01b031633146105cd57604051636570ecab60e11b815260040160405180910390fd5b6004544211156105f05760405163148cb5d760e01b815260040160405180910390fd5b6006805460ff19166001179055565b60008261060c8584610642565b14949350505050565b60065460009060ff168061063d57506004544211801561063d5750600654610100900460ff16155b905090565b600081815b84518110156106ae5760008582815181106106645761066461081f565b6020026020010151905080831161068a576000838152602082905260409020925061069b565b600081815260208490526040902092505b50806106a6816107ee565b915050610647565b509392505050565b80356001600160a01b03811681146106cd57600080fd5b919050565b6000602082840312156106e457600080fd5b6106ed826106b6565b9392505050565b6000806000806060858703121561070a57600080fd5b610713856106b6565b935060208501359250604085013567ffffffffffffffff8082111561073757600080fd5b818701915087601f83011261074b57600080fd5b81358181111561075a57600080fd5b8860208260051b850101111561076f57600080fd5b95989497505060200194505050565b6000821982111561079157610791610809565b500190565b6000826107b357634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156107d2576107d2610809565b500290565b6000828210156107e9576107e9610809565b500390565b600060001982141561080257610802610809565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212203d66485114b5d27ebaed382c2ad9185dba399eeaed4f224c32a0e562c5991f0764736f6c63430008060033";

type CampaignConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CampaignConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Campaign__factory extends ContractFactory {
  constructor(...args: CampaignConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Campaign";
  }

  deploy(
    _totalShares: BigNumberish,
    _merkleRoot: BytesLike,
    _rewardsCalculated: boolean,
    _strategyHash: BytesLike,
    _guardian: string,
    _evaluationPeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Campaign> {
    return super.deploy(
      _totalShares,
      _merkleRoot,
      _rewardsCalculated,
      _strategyHash,
      _guardian,
      _evaluationPeriodDuration,
      overrides || {}
    ) as Promise<Campaign>;
  }
  getDeployTransaction(
    _totalShares: BigNumberish,
    _merkleRoot: BytesLike,
    _rewardsCalculated: boolean,
    _strategyHash: BytesLike,
    _guardian: string,
    _evaluationPeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _totalShares,
      _merkleRoot,
      _rewardsCalculated,
      _strategyHash,
      _guardian,
      _evaluationPeriodDuration,
      overrides || {}
    );
  }
  attach(address: string): Campaign {
    return super.attach(address) as Campaign;
  }
  connect(signer: Signer): Campaign__factory {
    return super.connect(signer) as Campaign__factory;
  }
  static readonly contractName: "Campaign";
  public readonly contractName: "Campaign";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CampaignInterface {
    return new utils.Interface(_abi) as CampaignInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Campaign {
    return new Contract(address, _abi, signerOrProvider) as Campaign;
  }
}
