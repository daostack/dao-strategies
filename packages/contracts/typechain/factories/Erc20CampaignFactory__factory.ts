/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Erc20CampaignFactory,
  Erc20CampaignFactoryInterface,
} from "../Erc20CampaignFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_master",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newCampaign",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_sharesRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_uri",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_sharesPublished",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_claimPeriodStart",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "_rewardToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "CampaignCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "campaignAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_sharesMerkleRoot",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_uri",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesPublished",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_claimPeriodStart",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20",
        name: "_rewardToken",
        type: "address",
      },
    ],
    name: "createCampaign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161046038038061046083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6103cd806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636e1a1fac1461003b578063b099d55a1461006a575b600080fd5b61004e6100493660046102dc565b61007f565b6040516001600160a01b03909116815260200160405180910390f35b61007d6100783660046102f5565b61009c565b005b60008054610096906001600160a01b0316836101cb565b92915050565b600080546100b3906001600160a01b031684610238565b60405163441a7ca160e01b8152600481018b9052602481018a90526001600160a01b0389811660448301528881166064830152871515608483015260a4820187905284811660c48301529192509082169063441a7ca19060e401600060405180830381600087803b15801561012757600080fd5b505af115801561013b573d6000803e3d6000fd5b5050604080513381526001600160a01b0385811660208301528183018e9052606082018d90528b811660808301528a811660a083015289151560c083015260e082018990528616610100820152610120810187905290517f1876c1aeede51a2bf2840db7f195303afb6bd851abca91c8eaac04c4938b3120935090819003610140019150a1505050505050505050565b6000610231838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b9392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166100965760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b6000602082840312156102ee57600080fd5b5035919050565b600080600080600080600080610100898b03121561031257600080fd5b8835975060208901359650604089013561032b8161037f565b9550606089013561033b8161037f565b94506080890135801515811461035057600080fd5b935060a0890135925060c0890135915060e089013561036e8161037f565b809150509295985092959890939650565b6001600160a01b038116811461039457600080fd5b5056fea26469706673582212205c3f7bf1262589041e6ca8e966c43abd655659d299b8046ead56d70b4d16a3e364736f6c63430008060033";

type Erc20CampaignFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Erc20CampaignFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Erc20CampaignFactory__factory extends ContractFactory {
  constructor(...args: Erc20CampaignFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Erc20CampaignFactory";
  }

  deploy(
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Erc20CampaignFactory> {
    return super.deploy(
      _master,
      overrides || {}
    ) as Promise<Erc20CampaignFactory>;
  }
  getDeployTransaction(
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_master, overrides || {});
  }
  attach(address: string): Erc20CampaignFactory {
    return super.attach(address) as Erc20CampaignFactory;
  }
  connect(signer: Signer): Erc20CampaignFactory__factory {
    return super.connect(signer) as Erc20CampaignFactory__factory;
  }
  static readonly contractName: "Erc20CampaignFactory";
  public readonly contractName: "Erc20CampaignFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Erc20CampaignFactoryInterface {
    return new utils.Interface(_abi) as Erc20CampaignFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Erc20CampaignFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Erc20CampaignFactory;
  }
}
