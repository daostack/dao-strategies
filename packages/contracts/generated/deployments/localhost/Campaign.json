{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "ClaimingNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDuringEvaluationPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SharesAlreadyPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "campaignCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriodStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalShares",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "sharesMerkleRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Campaign.SharesData",
          "name": "_shares",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_uri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_sharesPublished",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_claimPeriodStart",
          "type": "uint256"
        }
      ],
      "name": "initCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalShares",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "sharesMerkleRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Campaign.SharesData",
          "name": "_shares",
          "type": "tuple"
        }
      ],
      "name": "publishShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "sharesMerkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesPublished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uri",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6d2a2a4c64379c0ad98335d4fa3d12c2dafb7b26df2dc6af5140a6e7134170de",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "717907",
    "logsBloom": "0x
    "blockHash": "0x282840abd5393fc28823c369989f4b4ee2c6e2b2aa5347112edb8e0fcf909bea",
    "transactionHash": "0x6d2a2a4c64379c0ad98335d4fa3d12c2dafb7b26df2dc6af5140a6e7134170de",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "717907",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "98266db9ffe61548f92e632d8124619b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ClaimingNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDuringEvaluationPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SharesAlreadyPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriodStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sharesMerkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Campaign.SharesData\",\"name\":\"_shares\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_uri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sharesPublished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_claimPeriodStart\",\"type\":\"uint256\"}],\"name\":\"initCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sharesMerkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Campaign.SharesData\",\"name\":\"_shares\",\"type\":\"tuple\"}],\"name\":\"publishShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sharesMerkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesPublished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Campaign\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Campaign\\n */\\ncontract Campaign is Initializable {\\n    struct SharesData {\\n        uint256 totalShares;\\n        bytes32 sharesMerkleRoot;\\n    }\\n\\n    SharesData public shares;\\n    bytes32 public uri;\\n    address public guardian;\\n    address public oracle;\\n    uint256 public claimPeriodStart;\\n    uint256 public totalClaimed;\\n    bool public campaignCancelled;\\n    bool public sharesPublished;\\n\\n    mapping(address => uint256) public claimed;\\n    mapping(address => uint256) public funds;\\n\\n    error InvalidProof();\\n    error NoRewardAvailable();\\n    error RewardTransferFailed();\\n    error OnlyGuardian();\\n    error OnlyDuringEvaluationPeriod();\\n    error WithdrawalNotAllowed();\\n    error ClaimingNotAllowed();\\n    error WithdrawTransferFailed();\\n    error NoFunds();\\n    error SharesAlreadyPublished();\\n    error OnlyOracle();\\n\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian) {\\n            revert OnlyGuardian();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        if (msg.sender != oracle) {\\n            revert OnlyOracle();\\n        }\\n        _;\\n    }\\n\\n    function initCampaign(\\n        SharesData memory _shares,\\n        bytes32 _uri,\\n        address _guardian,\\n        address _oracle,\\n        bool _sharesPublished,\\n        uint256 _claimPeriodStart\\n    ) public initializer {\\n        shares = _shares;\\n        uri = _uri;\\n        guardian = _guardian;\\n        oracle = _oracle;\\n        sharesPublished = _sharesPublished;\\n        claimPeriodStart = _claimPeriodStart;\\n    }\\n\\n    function publishShares(SharesData memory _shares) external onlyOracle {\\n        if (sharesPublished) {\\n            revert SharesAlreadyPublished();\\n        }\\n        sharesPublished = true;\\n        shares = _shares;\\n    }\\n\\n    function claim(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) external {\\n        if (!claimAllowed()) {\\n            revert ClaimingNotAllowed();\\n        }\\n        bytes32 leaf = keccak256(abi.encodePacked(account, share));\\n        if (MerkleProof.verify(proof, shares.sharesMerkleRoot, leaf) == false) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 totalFundsReceived = address(this).balance + totalClaimed;\\n        uint256 reward = (totalFundsReceived * share) / shares.totalShares - claimed[account];\\n        if (reward == 0) {\\n            revert NoRewardAvailable();\\n        }\\n        claimed[account] += reward;\\n        totalClaimed += reward;\\n\\n        (bool success, ) = account.call{ value: reward }(\\\"\\\");\\n        if (!success) {\\n            revert RewardTransferFailed();\\n        }\\n    }\\n\\n    function cancelCampaign() external onlyGuardian {\\n        if (block.timestamp > claimPeriodStart) {\\n            revert OnlyDuringEvaluationPeriod();\\n        }\\n        campaignCancelled = true;\\n    }\\n\\n    receive() external payable {\\n        funds[msg.sender] += msg.value;\\n    }\\n\\n    function withdrawFunds(address account) external {\\n        if (!withdrawAllowed()) {\\n            revert WithdrawalNotAllowed();\\n        }\\n\\n        uint256 amount = funds[account];\\n        if (amount == 0) {\\n            revert NoFunds();\\n        }\\n        funds[account] = 0;\\n\\n        (bool success, ) = account.call{ value: amount }(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawTransferFailed();\\n        }\\n    }\\n\\n    function withdrawAllowed() private view returns (bool) {\\n        return campaignCancelled || ((block.timestamp > claimPeriodStart) && !sharesPublished);\\n    }\\n\\n    function claimAllowed() private view returns (bool) {\\n        return (block.timestamp > claimPeriodStart) && sharesPublished && !campaignCancelled;\\n    }\\n}\\n\",\"keccak256\":\"0x2bb32f7448944c59caa0860a183ccc34e19cd1a4adfd62e416fe9dc0b2d831fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c07806100206000396000f3fe6080604052600436106100ec5760003560e01c806368742da61161008a578063d2e605c611610059578063d2e605c6146102ba578063d54ad2a1146102da578063e2ae93fb146102f0578063eac989f81461031d57600080fd5b806368742da6146102385780637dc0d1d014610258578063980e784414610278578063c884ef831461028d57600080fd5b8063440113c0116100c6578063440113c0146101a2578063452a9320146101c257806358c13b7e146101fa57806363a5b88d1461021e57600080fd5b806303314efa1461011c5780632e2da9bf146101515780633d13f8741461018057600080fd5b3661011757336000908152600a602052604081208054349290610110908490610b1a565b9091555050005b600080fd5b34801561012857600080fd5b50600154600254610137919082565b604080519283526020830191909152015b60405180910390f35b34801561015d57600080fd5b5060085461017090610100900460ff1681565b6040519015158152602001610148565b34801561018c57600080fd5b506101a061019b3660046109b6565b610333565b005b3480156101ae57600080fd5b506101a06101bd366004610a40565b610528565b3480156101ce57600080fd5b506004546101e2906001600160a01b031681565b6040516001600160a01b039091168152602001610148565b34801561020657600080fd5b5061021060065481565b604051908152602001610148565b34801561022a57600080fd5b506008546101709060ff1681565b34801561024457600080fd5b506101a0610253366004610994565b610599565b34801561026457600080fd5b506005546101e2906001600160a01b031681565b34801561028457600080fd5b506101a061067b565b34801561029957600080fd5b506102106102a8366004610994565b60096020526000908152604090205481565b3480156102c657600080fd5b506101a06102d5366004610a5c565b6106d8565b3480156102e657600080fd5b5061021060075481565b3480156102fc57600080fd5b5061021061030b366004610994565b600a6020526000908152604090205481565b34801561032957600080fd5b5061021060035481565b61033b6107a7565b61035857604051638ebaa35d60e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000906054016040516020818303038152906040528051906020012090506103da8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060025491508490506107d5565b6103f7576040516309bde33960e01b815260040160405180910390fd5b6000600754476104079190610b1a565b6001600160a01b03871660009081526009602052604081205460015492935090916104328885610b54565b61043c9190610b32565b6104469190610b73565b90508061046657604051636d363c4560e01b815260040160405180910390fd5b6001600160a01b0387166000908152600960205260408120805483929061048e908490610b1a565b9250508190555080600760008282546104a79190610b1a565b90915550506040516000906001600160a01b0389169083908381818185875af1925050503d80600081146104f7576040519150601f19603f3d011682016040523d82523d6000602084013e6104fc565b606091505b505090508061051e5760405163078ecf4160e41b815260040160405180910390fd5b5050505050505050565b6005546001600160a01b03163314610553576040516380fee10560e01b815260040160405180910390fd5b600854610100900460ff161561057c5760405163e2c7026360e01b815260040160405180910390fd5b6008805461ff001916610100179055805160015560200151600255565b6105a16107eb565b6105be5760405163209a769d60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600a6020526040902054806105f55760405163043f9e1160e41b815260040160405180910390fd5b6001600160a01b0382166000818152600a60205260408082208290555190919083908381818185875af1925050503d806000811461064f576040519150601f19603f3d011682016040523d82523d6000602084013e610654565b606091505b5050905080610676576040516369a4751b60e01b815260040160405180910390fd5b505050565b6004546001600160a01b031633146106a657604051636570ecab60e11b815260040160405180910390fd5b6006544211156106c95760405163148cb5d760e01b815260040160405180910390fd5b6008805460ff19166001179055565b60006106e46001610816565b905080156106fc576000805461ff0019166101001790555b865160015560208701516002556003869055600480546001600160a01b038088166001600160a01b0319928316179092556005805492871692909116919091179055600880548415156101000261ff00199091161790556006829055801561079e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6000600654421180156107c15750600854610100900460ff165b80156107d0575060085460ff16155b905090565b6000826107e285846108ac565b14949350505050565b60085460009060ff16806107d05750600654421180156107d0575050600854610100900460ff161590565b60008054610100900460ff1615610866578160ff1660011480156108395750303b155b61085e5760405162461bcd60e51b815260040161085590610acc565b60405180910390fd5b506000919050565b60005460ff80841691161061088d5760405162461bcd60e51b815260040161085590610acc565b506000805460ff191660ff92909216919091179055600190565b919050565b600081815b84518110156109185760008582815181106108ce576108ce610bbb565b602002602001015190508083116108f45760008381526020829052604090209250610905565b600081815260208490526040902092505b508061091081610b8a565b9150506108b1565b509392505050565b80356001600160a01b03811681146108a757600080fd5b60006040828403121561094957600080fd5b6040516040810181811067ffffffffffffffff8211171561097a57634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b6000602082840312156109a657600080fd5b6109af82610920565b9392505050565b600080600080606085870312156109cc57600080fd5b6109d585610920565b935060208501359250604085013567ffffffffffffffff808211156109f957600080fd5b818701915087601f830112610a0d57600080fd5b813581811115610a1c57600080fd5b8860208260051b8501011115610a3157600080fd5b95989497505060200194505050565b600060408284031215610a5257600080fd5b6109af8383610937565b60008060008060008060e08789031215610a7557600080fd5b610a7f8888610937565b955060408701359450610a9460608801610920565b9350610aa260808801610920565b925060a08701358015158114610ab757600080fd5b8092505060c087013590509295509295509295565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115610b2d57610b2d610ba5565b500190565b600082610b4f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b6e57610b6e610ba5565b500290565b600082821015610b8557610b85610ba5565b500390565b6000600019821415610b9e57610b9e610ba5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220530983d1c876123db363eed640250b23c9c5cff505a43db75bf02299e0d568af64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c806368742da61161008a578063d2e605c611610059578063d2e605c6146102ba578063d54ad2a1146102da578063e2ae93fb146102f0578063eac989f81461031d57600080fd5b806368742da6146102385780637dc0d1d014610258578063980e784414610278578063c884ef831461028d57600080fd5b8063440113c0116100c6578063440113c0146101a2578063452a9320146101c257806358c13b7e146101fa57806363a5b88d1461021e57600080fd5b806303314efa1461011c5780632e2da9bf146101515780633d13f8741461018057600080fd5b3661011757336000908152600a602052604081208054349290610110908490610b1a565b9091555050005b600080fd5b34801561012857600080fd5b50600154600254610137919082565b604080519283526020830191909152015b60405180910390f35b34801561015d57600080fd5b5060085461017090610100900460ff1681565b6040519015158152602001610148565b34801561018c57600080fd5b506101a061019b3660046109b6565b610333565b005b3480156101ae57600080fd5b506101a06101bd366004610a40565b610528565b3480156101ce57600080fd5b506004546101e2906001600160a01b031681565b6040516001600160a01b039091168152602001610148565b34801561020657600080fd5b5061021060065481565b604051908152602001610148565b34801561022a57600080fd5b506008546101709060ff1681565b34801561024457600080fd5b506101a0610253366004610994565b610599565b34801561026457600080fd5b506005546101e2906001600160a01b031681565b34801561028457600080fd5b506101a061067b565b34801561029957600080fd5b506102106102a8366004610994565b60096020526000908152604090205481565b3480156102c657600080fd5b506101a06102d5366004610a5c565b6106d8565b3480156102e657600080fd5b5061021060075481565b3480156102fc57600080fd5b5061021061030b366004610994565b600a6020526000908152604090205481565b34801561032957600080fd5b5061021060035481565b61033b6107a7565b61035857604051638ebaa35d60e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000906054016040516020818303038152906040528051906020012090506103da8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060025491508490506107d5565b6103f7576040516309bde33960e01b815260040160405180910390fd5b6000600754476104079190610b1a565b6001600160a01b03871660009081526009602052604081205460015492935090916104328885610b54565b61043c9190610b32565b6104469190610b73565b90508061046657604051636d363c4560e01b815260040160405180910390fd5b6001600160a01b0387166000908152600960205260408120805483929061048e908490610b1a565b9250508190555080600760008282546104a79190610b1a565b90915550506040516000906001600160a01b0389169083908381818185875af1925050503d80600081146104f7576040519150601f19603f3d011682016040523d82523d6000602084013e6104fc565b606091505b505090508061051e5760405163078ecf4160e41b815260040160405180910390fd5b5050505050505050565b6005546001600160a01b03163314610553576040516380fee10560e01b815260040160405180910390fd5b600854610100900460ff161561057c5760405163e2c7026360e01b815260040160405180910390fd5b6008805461ff001916610100179055805160015560200151600255565b6105a16107eb565b6105be5760405163209a769d60e11b815260040160405180910390fd5b6001600160a01b0381166000908152600a6020526040902054806105f55760405163043f9e1160e41b815260040160405180910390fd5b6001600160a01b0382166000818152600a60205260408082208290555190919083908381818185875af1925050503d806000811461064f576040519150601f19603f3d011682016040523d82523d6000602084013e610654565b606091505b5050905080610676576040516369a4751b60e01b815260040160405180910390fd5b505050565b6004546001600160a01b031633146106a657604051636570ecab60e11b815260040160405180910390fd5b6006544211156106c95760405163148cb5d760e01b815260040160405180910390fd5b6008805460ff19166001179055565b60006106e46001610816565b905080156106fc576000805461ff0019166101001790555b865160015560208701516002556003869055600480546001600160a01b038088166001600160a01b0319928316179092556005805492871692909116919091179055600880548415156101000261ff00199091161790556006829055801561079e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6000600654421180156107c15750600854610100900460ff165b80156107d0575060085460ff16155b905090565b6000826107e285846108ac565b14949350505050565b60085460009060ff16806107d05750600654421180156107d0575050600854610100900460ff161590565b60008054610100900460ff1615610866578160ff1660011480156108395750303b155b61085e5760405162461bcd60e51b815260040161085590610acc565b60405180910390fd5b506000919050565b60005460ff80841691161061088d5760405162461bcd60e51b815260040161085590610acc565b506000805460ff191660ff92909216919091179055600190565b919050565b600081815b84518110156109185760008582815181106108ce576108ce610bbb565b602002602001015190508083116108f45760008381526020829052604090209250610905565b600081815260208490526040902092505b508061091081610b8a565b9150506108b1565b509392505050565b80356001600160a01b03811681146108a757600080fd5b60006040828403121561094957600080fd5b6040516040810181811067ffffffffffffffff8211171561097a57634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b6000602082840312156109a657600080fd5b6109af82610920565b9392505050565b600080600080606085870312156109cc57600080fd5b6109d585610920565b935060208501359250604085013567ffffffffffffffff808211156109f957600080fd5b818701915087601f830112610a0d57600080fd5b813581811115610a1c57600080fd5b8860208260051b8501011115610a3157600080fd5b95989497505060200194505050565b600060408284031215610a5257600080fd5b6109af8383610937565b60008060008060008060e08789031215610a7557600080fd5b610a7f8888610937565b955060408701359450610a9460608801610920565b9350610aa260808801610920565b925060a08701358015158114610ab757600080fd5b8092505060c087013590509295509295509295565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115610b2d57610b2d610ba5565b500190565b600082610b4f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b6e57610b6e610ba5565b500290565b600082821015610b8557610b85610ba5565b500390565b6000600019821415610b9e57610b9e610ba5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220530983d1c876123db363eed640250b23c9c5cff505a43db75bf02299e0d568af64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Campaign",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 86,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 89,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 624,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "shares",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(SharesData)621_storage"
      },
      {
        "astId": 626,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "uri",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 628,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "guardian",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 630,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "oracle",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 632,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "claimPeriodStart",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 634,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 636,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "campaignCancelled",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 638,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "sharesPublished",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 642,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "claimed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 646,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "funds",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(SharesData)621_storage": {
        "encoding": "inplace",
        "label": "struct Campaign.SharesData",
        "members": [
          {
            "astId": 618,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "totalShares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 620,
            "contract": "contracts/Campaign.sol:Campaign",
            "label": "sharesMerkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}