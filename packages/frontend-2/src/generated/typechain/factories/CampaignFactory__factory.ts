/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CampaignFactory,
  CampaignFactoryInterface,
} from "../CampaignFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_master",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newCampaign",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_sharesRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_sharesTotal",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_uri",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_sharesPublished",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_claimPeriodStart",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "CampaignCreated",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalShares",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "sharesMerkleRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct Campaign.SharesData",
        name: "_shares",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_uri",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_sharesPublished",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_claimPeriodStart",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "createCampaign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103e43803806103e483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610351806100936000396000f3fe6080604052600436106100225760003560e01c8063c2e152c41461002e57600080fd5b3661002957005b600080fd5b34801561003a57600080fd5b5061004e61004936600461025f565b610050565b005b60008054610067906001600160a01b031683610189565b60405163697302e360e11b81528951600482015260208a01516024820152604481018990526001600160a01b038881166064830152878116608483015286151560a483015260c482018690529192509082169063d2e605c69060e401600060405180830381600087803b1580156100dd57600080fd5b505af11580156100f1573d6000803e3d6000fd5b505050506020888101518951604080513381526001600160a01b03808716958201959095529081019290925260608201526080810189905281881660a082015290861660c082015284151560e0820152610100810184905261012081018390527f65f3e8742f398b2d2a89e76e43002bccd92755539814ba5194e6da51d05bc70f906101400160405180910390a15050505050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b03811661022d5760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c6564000000000000000000604482015260640160405180910390fd5b92915050565b80356001600160a01b038116811461024a57600080fd5b919050565b8035801515811461024a57600080fd5b600080600080600080600087890361010081121561027c57600080fd5b604081121561028a57600080fd5b506040516040810181811067ffffffffffffffff821117156102bc57634e487b7160e01b600052604160045260246000fd5b6040908152893582526020808b01359083015290975088013595506102e360608901610233565b94506102f160808901610233565b93506102ff60a0890161024f565b925060c0880135915060e088013590509295989194975092955056fea264697066735822122059af2aa52ba7b7b1c09616b5f6908cdbf57bdbc1b673d7e33e4b60657075259f64736f6c63430008060033";

type CampaignFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CampaignFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CampaignFactory__factory extends ContractFactory {
  constructor(...args: CampaignFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CampaignFactory";
  }

  deploy(
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CampaignFactory> {
    return super.deploy(_master, overrides || {}) as Promise<CampaignFactory>;
  }
  getDeployTransaction(
    _master: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_master, overrides || {});
  }
  attach(address: string): CampaignFactory {
    return super.attach(address) as CampaignFactory;
  }
  connect(signer: Signer): CampaignFactory__factory {
    return super.connect(signer) as CampaignFactory__factory;
  }
  static readonly contractName: "CampaignFactory";
  public readonly contractName: "CampaignFactory";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CampaignFactoryInterface {
    return new utils.Interface(_abi) as CampaignFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CampaignFactory {
    return new Contract(address, _abi, signerOrProvider) as CampaignFactory;
  }
}
