/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CampaignInterface extends utils.Interface {
  contractName: "Campaign";
  functions: {
    "ACTIVATION_PERIOD()": FunctionFragment;
    "ACTIVE_DURATION()": FunctionFragment;
    "CHALLENGE_PERIOD()": FunctionFragment;
    "TOTAL_SHARES()": FunctionFragment;
    "activationTime()": FunctionFragment;
    "approvedMerkleRoot()": FunctionFragment;
    "balanceOfAsset(address)": FunctionFragment;
    "challenge(uint8)": FunctionFragment;
    "checkMerkleRootUpdateAllowed()": FunctionFragment;
    "claim(address,uint256,bytes32[],address[],address)": FunctionFragment;
    "claimed(address,address)": FunctionFragment;
    "deployTime()": FunctionFragment;
    "fund(address,uint256)": FunctionFragment;
    "getValidRoot()": FunctionFragment;
    "guardian()": FunctionFragment;
    "initCampaign(bytes32,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isChallengePeriod()": FunctionFragment;
    "isPendingActive()": FunctionFragment;
    "isProposeWindowActive()": FunctionFragment;
    "lockForWithdrawals()": FunctionFragment;
    "locked()": FunctionFragment;
    "oracle()": FunctionFragment;
    "pendingMerkleRoot()": FunctionFragment;
    "proposeShares(bytes32,bytes32)": FunctionFragment;
    "providers(address,address)": FunctionFragment;
    "rewardsAvailableToClaimer(address,uint256,address)": FunctionFragment;
    "setLock(bool)": FunctionFragment;
    "strategyUri()": FunctionFragment;
    "totalClaimed(address)": FunctionFragment;
    "totalReceived(address)": FunctionFragment;
    "verifyShares(address,uint256,bytes32[])": FunctionFragment;
    "withdrawAllowed()": FunctionFragment;
    "withdrawAssets(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACTIVATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTIVE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHALLENGE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMerkleRootUpdateAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish, BytesLike[], string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initCampaign",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isChallengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPendingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isProposeWindowActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockForWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeShares",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "providers",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAvailableToClaimer",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setLock", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "strategyUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReceived",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyShares",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAssets",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACTIVATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTIVE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHALLENGE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkMerkleRootUpdateAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValidRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChallengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPendingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposeWindowActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockForWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAvailableToClaimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategyUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAssets",
    data: BytesLike
  ): Result;

  events: {
    "Challenge(uint8)": EventFragment;
    "Claim(address,uint256,uint256,address)": EventFragment;
    "Fund(address,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Lock(bool)": EventFragment;
    "SharesMerkleRootUpdate(bytes32,bytes32,uint256)": EventFragment;
    "Withdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Challenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesMerkleRootUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ChallengeEvent = TypedEvent<[number], { action: number }>;

export type ChallengeEventFilter = TypedEventFilter<ChallengeEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { account: string; share: BigNumber; reward: BigNumber; assset: string }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type FundEvent = TypedEvent<
  [string, BigNumber, string],
  { provider: string; amount: BigNumber; asset: string }
>;

export type FundEventFilter = TypedEventFilter<FundEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type LockEvent = TypedEvent<[boolean], { locked: boolean }>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export type SharesMerkleRootUpdateEvent = TypedEvent<
  [string, string, BigNumber],
  { sharesMerkleRoot: string; sharesUri: string; activationTime: BigNumber }
>;

export type SharesMerkleRootUpdateEventFilter =
  TypedEventFilter<SharesMerkleRootUpdateEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, string],
  { account: string; amount: BigNumber; asset: string }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Campaign extends BaseContract {
  contractName: "Campaign";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTIVATION_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    ACTIVE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHALLENGE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    activationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    balanceOfAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    challenge(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkMerkleRootUpdateAllowed(overrides?: CallOverrides): Promise<[void]>;

    claim(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      assets: string[],
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deployTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    fund(
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getValidRoot(
      overrides?: CallOverrides
    ): Promise<[string] & { root: string }>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    initCampaign(
      _strategyUri: BytesLike,
      _guardian: string,
      _oracle: string,
      _activationTime: BigNumberish,
      _CHALLENGE_PERIOD: BigNumberish,
      _ACTIVATION_PERIOD: BigNumberish,
      _ACTIVE_DURATION: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isChallengePeriod(overrides?: CallOverrides): Promise<[boolean]>;

    isPendingActive(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isActive: boolean }>;

    isProposeWindowActive(overrides?: CallOverrides): Promise<[boolean]>;

    lockForWithdrawals(overrides?: CallOverrides): Promise<[boolean]>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    proposeShares(
      _sharesMerkleRoot: BytesLike,
      _sharesUri: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    providers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsAvailableToClaimer(
      account: string,
      share: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    setLock(
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyUri(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReceived(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    verifyShares(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdrawAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawAssets(
      account: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ACTIVATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  ACTIVE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  CHALLENGE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  activationTime(overrides?: CallOverrides): Promise<BigNumber>;

  approvedMerkleRoot(overrides?: CallOverrides): Promise<string>;

  balanceOfAsset(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  challenge(
    action: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkMerkleRootUpdateAllowed(overrides?: CallOverrides): Promise<void>;

  claim(
    account: string,
    share: BigNumberish,
    proof: BytesLike[],
    assets: string[],
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deployTime(overrides?: CallOverrides): Promise<BigNumber>;

  fund(
    asset: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getValidRoot(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  initCampaign(
    _strategyUri: BytesLike,
    _guardian: string,
    _oracle: string,
    _activationTime: BigNumberish,
    _CHALLENGE_PERIOD: BigNumberish,
    _ACTIVATION_PERIOD: BigNumberish,
    _ACTIVE_DURATION: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isChallengePeriod(overrides?: CallOverrides): Promise<boolean>;

  isPendingActive(overrides?: CallOverrides): Promise<boolean>;

  isProposeWindowActive(overrides?: CallOverrides): Promise<boolean>;

  lockForWithdrawals(overrides?: CallOverrides): Promise<boolean>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pendingMerkleRoot(overrides?: CallOverrides): Promise<string>;

  proposeShares(
    _sharesMerkleRoot: BytesLike,
    _sharesUri: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  providers(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsAvailableToClaimer(
    account: string,
    share: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setLock(
    _lock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyUri(overrides?: CallOverrides): Promise<string>;

  totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalReceived(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  verifyShares(
    account: string,
    share: BigNumberish,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<void>;

  withdrawAllowed(overrides?: CallOverrides): Promise<boolean>;

  withdrawAssets(
    account: string,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACTIVATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    ACTIVE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    activationTime(overrides?: CallOverrides): Promise<BigNumber>;

    approvedMerkleRoot(overrides?: CallOverrides): Promise<string>;

    balanceOfAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenge(action: BigNumberish, overrides?: CallOverrides): Promise<void>;

    checkMerkleRootUpdateAllowed(overrides?: CallOverrides): Promise<void>;

    claim(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      assets: string[],
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTime(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getValidRoot(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    initCampaign(
      _strategyUri: BytesLike,
      _guardian: string,
      _oracle: string,
      _activationTime: BigNumberish,
      _CHALLENGE_PERIOD: BigNumberish,
      _ACTIVATION_PERIOD: BigNumberish,
      _ACTIVE_DURATION: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isChallengePeriod(overrides?: CallOverrides): Promise<boolean>;

    isPendingActive(overrides?: CallOverrides): Promise<boolean>;

    isProposeWindowActive(overrides?: CallOverrides): Promise<boolean>;

    lockForWithdrawals(overrides?: CallOverrides): Promise<boolean>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<string>;

    proposeShares(
      _sharesMerkleRoot: BytesLike,
      _sharesUri: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    providers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsAvailableToClaimer(
      account: string,
      share: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLock(_lock: boolean, overrides?: CallOverrides): Promise<void>;

    strategyUri(overrides?: CallOverrides): Promise<string>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalReceived(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    verifyShares(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllowed(overrides?: CallOverrides): Promise<boolean>;

    withdrawAssets(
      account: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Challenge(uint8)"(action?: null): ChallengeEventFilter;
    Challenge(action?: null): ChallengeEventFilter;

    "Claim(address,uint256,uint256,address)"(
      account?: string | null,
      share?: null,
      reward?: null,
      assset?: null
    ): ClaimEventFilter;
    Claim(
      account?: string | null,
      share?: null,
      reward?: null,
      assset?: null
    ): ClaimEventFilter;

    "Fund(address,uint256,address)"(
      provider?: string | null,
      amount?: null,
      asset?: null
    ): FundEventFilter;
    Fund(
      provider?: string | null,
      amount?: null,
      asset?: null
    ): FundEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Lock(bool)"(locked?: null): LockEventFilter;
    Lock(locked?: null): LockEventFilter;

    "SharesMerkleRootUpdate(bytes32,bytes32,uint256)"(
      sharesMerkleRoot?: null,
      sharesUri?: null,
      activationTime?: null
    ): SharesMerkleRootUpdateEventFilter;
    SharesMerkleRootUpdate(
      sharesMerkleRoot?: null,
      sharesUri?: null,
      activationTime?: null
    ): SharesMerkleRootUpdateEventFilter;

    "Withdraw(address,uint256,address)"(
      account?: string | null,
      amount?: null,
      asset?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      amount?: null,
      asset?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    ACTIVATION_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    ACTIVE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    CHALLENGE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    activationTime(overrides?: CallOverrides): Promise<BigNumber>;

    approvedMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenge(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkMerkleRootUpdateAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      assets: string[],
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployTime(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getValidRoot(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    initCampaign(
      _strategyUri: BytesLike,
      _guardian: string,
      _oracle: string,
      _activationTime: BigNumberish,
      _CHALLENGE_PERIOD: BigNumberish,
      _ACTIVATION_PERIOD: BigNumberish,
      _ACTIVE_DURATION: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isChallengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isPendingActive(overrides?: CallOverrides): Promise<BigNumber>;

    isProposeWindowActive(overrides?: CallOverrides): Promise<BigNumber>;

    lockForWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    proposeShares(
      _sharesMerkleRoot: BytesLike,
      _sharesUri: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    providers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsAvailableToClaimer(
      account: string,
      share: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLock(
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyUri(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalReceived(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    verifyShares(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAssets(
      account: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTIVATION_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ACTIVE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHALLENGE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvedMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challenge(
      action: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkMerkleRootUpdateAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      assets: string[],
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fund(
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getValidRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initCampaign(
      _strategyUri: BytesLike,
      _guardian: string,
      _oracle: string,
      _activationTime: BigNumberish,
      _CHALLENGE_PERIOD: BigNumberish,
      _ACTIVATION_PERIOD: BigNumberish,
      _ACTIVE_DURATION: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isChallengePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPendingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProposeWindowActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockForWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeShares(
      _sharesMerkleRoot: BytesLike,
      _sharesUri: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    providers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsAvailableToClaimer(
      account: string,
      share: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLock(
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReceived(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyShares(
      account: string,
      share: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAssets(
      account: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
