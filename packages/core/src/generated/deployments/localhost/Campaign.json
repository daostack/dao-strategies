{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "ActiveChallengePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimingNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Locked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRewardAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyInChallengePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOracle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Campaign.ChallengeAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "Challenge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assset",
          "type": "address"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "Fund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sharesUri",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activationTime",
          "type": "uint256"
        }
      ],
      "name": "SharesMerkleRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOTAL_SHARES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "balanceOfAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Campaign.ChallengeAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_strategyUri",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        }
      ],
      "name": "initCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRootActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sharesMerkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_sharesUri",
          "type": "bytes32"
        }
      ],
      "name": "proposeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "providers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "rewardsAvailableToClaimer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        }
      ],
      "name": "setLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyUri",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "totalFundsReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyShares",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd4eed737c649ceb6b614cdac058cc12f847a960b41b41e05254f88a592404a3c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1312110",
    "logsBloom": "0x
    "blockHash": "0x3f7a501cd148c77723b17caeb4abaacb73d4f90b9b0a24a87dc45fc8b2bd5a99",
    "transactionHash": "0xd4eed737c649ceb6b614cdac058cc12f847a960b41b41e05254f88a592404a3c",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1312110",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec9986121ab0a3d1ac1fb56d76612bce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActiveChallengePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimingNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyInChallengePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Campaign.ChallengeAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"Challenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assset\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sharesMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sharesUri\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"}],\"name\":\"SharesMerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"balanceOfAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Campaign.ChallengeAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_strategyUri\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"initCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRootActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sharesMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sharesUri\",\"type\":\"bytes32\"}],\"name\":\"proposeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"rewardsAvailableToClaimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyUri\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"totalFundsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyShares\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Campaign\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"TOTAL_SHARES()\":{\"notice\":\"Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 \"},\"claim(address,uint256,bytes32[],address[])\":{\"notice\":\"External function to start claiming one ore more assets. Proof verification is only done here \"},\"fund(address,uint256)\":{\"notice\":\"Fund campaign with ETH or any ERC20 token \"},\"getValidRoot()\":{\"notice\":\"Valid root is either the approved or pending one depending on the activation time \"},\"initCampaign(bytes32,bytes32,address,address,uint256)\":{\"notice\":\"called at deploy (using the campaign factory). It may or may not include a non-zero merkleRoot \"},\"locked()\":{\"notice\":\"Once locked, the merkleRoot cannot be updated anymore. Once locked, it cannot be un-locked  \"},\"pendingMerkleRoot()\":{\"notice\":\"Optimistic flow used to update merkleRoot. - Oracle propose update and Guardian can block - Guardian cannot initiate an update \"},\"proposeShares(bytes32,bytes32)\":{\"notice\":\"Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only after a CHALLENGE_PERIOD \"},\"rewardsAvailableToClaimer(address,uint256,address)\":{\"notice\":\"Validates the shares of an account and computes the available rewards it \"},\"totalClaimed(address)\":{\"notice\":\"Counters of the total amount of funds provided by all providers and claimed by all claimers \"},\"totalFundsReceived(address)\":{\"notice\":\"Total funds received by the contract \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Campaign.sol\":\"Campaign\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Campaign\\n */\\ncontract Campaign is Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    /** Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 */\\n    uint256 public constant TOTAL_SHARES = 10**18;\\n\\n    enum ChallengeAction {\\n        CancelPending,\\n        CacncelPendingAndLockCurrent,\\n        CancelCampaign\\n    }\\n\\n    bytes32 public approvedMerkleRoot;\\n\\n    /** Optimistic flow used to update merkleRoot.\\n     * - Oracle propose update and Guardian can block\\n     * - Guardian cannot initiate an update */\\n    bytes32 public pendingMerkleRoot;\\n    uint256 public activationTime;\\n\\n    bytes32 public strategyUri;\\n    address public guardian;\\n    address public oracle;\\n    uint256 public challengePeriod;\\n\\n    /** Counters of the total amount of funds provided by all providers\\n     * and claimed by all claimers */\\n    mapping(address => uint256) public totalClaimed;\\n\\n    /** Once locked, the merkleRoot cannot be updated anymore.\\n     * Once locked, it cannot be un-locked  */\\n    bool public locked;\\n\\n    mapping(address => mapping(address => uint256)) public claimed;\\n    mapping(address => mapping(address => uint256)) public providers;\\n\\n    event Fund(address provider, uint256 amount, address asset);\\n    event SharesMerkleRoot(bytes32 sharesMerkleRoot, bytes32 sharesUri, uint256 activationTime);\\n    event Claim(address account, uint256 share, uint256 reward, address assset);\\n    event Challenge(ChallengeAction action);\\n    event Withdraw(address account, uint256 amount, address asset);\\n\\n    error InvalidProof();\\n    error ActiveChallengePeriod();\\n    error NoRewardAvailable();\\n    error OnlyGuardian();\\n    error WithdrawalNotAllowed();\\n    error ClaimingNotAllowed();\\n    error NoFunds();\\n    error OnlyOracle();\\n    error Locked();\\n    error OnlyInChallengePeriod();\\n\\n    modifier onlyGuardian() {\\n        if (msg.sender != guardian) {\\n            revert OnlyGuardian();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        if (msg.sender != oracle) {\\n            revert OnlyOracle();\\n        }\\n        _;\\n    }\\n\\n    modifier notLocked() {\\n        if (locked) {\\n            revert Locked();\\n        }\\n        _;\\n    }\\n\\n    /** called at deploy (using the campaign factory). It may or may not\\n     * include a non-zero merkleRoot */\\n    function initCampaign(\\n        bytes32 _sharesMerkleRoot,\\n        bytes32 _strategyUri,\\n        address _guardian,\\n        address _oracle,\\n        uint256 _challengePeriod\\n    ) public initializer {\\n        strategyUri = _strategyUri;\\n        guardian = _guardian;\\n        oracle = _oracle;\\n        challengePeriod = _challengePeriod;\\n\\n        if (_sharesMerkleRoot != bytes32(0)) {\\n            pendingMerkleRoot = _sharesMerkleRoot;\\n            activationTime = block.timestamp + challengePeriod;\\n        } else {\\n            activationTime = type(uint256).max;\\n        }\\n    }\\n\\n    function _fund(\\n        uint256 amount,\\n        address asset,\\n        address from\\n    ) internal {\\n        /** Not sure if this assigmations should be done after the funds where received. JIC */\\n        providers[asset][from] += amount;\\n        if (asset != address(0)) {\\n            IERC20(asset).safeTransferFrom(from, address(this), amount);\\n        }\\n        emit Fund(from, amount, address(asset));\\n    }\\n\\n    receive() external payable {\\n        _fund(msg.value, address(0), msg.sender);\\n    }\\n\\n    /** Fund campaign with ETH or any ERC20 token */\\n    function fund(address asset, uint256 amount) public payable {\\n        if (asset == address(0)) {\\n            _fund(msg.value, asset, msg.sender);\\n        } else {\\n            _fund(amount, asset, msg.sender);\\n        }\\n    }\\n\\n    function balanceOfAsset(address asset) public view returns (uint256) {\\n        return asset == address(0) ? address(this).balance : IERC20(asset).balanceOf(address(this));\\n    }\\n\\n    function transferValueOut(\\n        address to,\\n        uint256 amount,\\n        address asset\\n    ) internal {\\n        if (asset == address(0)) {\\n            (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n            require(success, \\\"ether transfer failed\\\");\\n        } else {\\n            IERC20(asset).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /** Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only\\n     * after a CHALLENGE_PERIOD */\\n    function proposeShares(bytes32 _sharesMerkleRoot, bytes32 _sharesUri) external onlyOracle notLocked {\\n        if (pendingMerkleRoot != bytes32(0) && block.timestamp < activationTime) {\\n            revert ActiveChallengePeriod();\\n        }\\n\\n        approvedMerkleRoot = pendingMerkleRoot;\\n        pendingMerkleRoot = _sharesMerkleRoot;\\n        activationTime = block.timestamp + challengePeriod;\\n\\n        emit SharesMerkleRoot(_sharesMerkleRoot, _sharesUri, activationTime);\\n    }\\n\\n    function isRootActive() public view returns (bool) {\\n        return block.timestamp >= activationTime;\\n    }\\n\\n    /** Valid root is either the approved or pending one depending on the activation time */\\n    function getValidRoot() public view returns (bytes32 root) {\\n        return isRootActive() ? pendingMerkleRoot : approvedMerkleRoot;\\n    }\\n\\n    /** Total funds received by the contract */\\n    function totalFundsReceived(address asset) public view returns (uint256 total) {\\n        return balanceOfAsset(asset) + totalClaimed[asset];\\n    }\\n\\n    /** Validates the shares of an account and computes the available rewards it */\\n    function rewardsAvailableToClaimer(\\n        address account,\\n        uint256 share,\\n        address asset\\n    ) public view returns (uint256 total) {\\n        /** Rewards by claimer are a portion of the total funds received. If new funds are received, new rewards will become available */\\n        return (totalFundsReceived(asset) * share) / TOTAL_SHARES - claimed[asset][account];\\n    }\\n\\n    function verifyShares(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof\\n    ) public view {\\n        bytes32 claimingMerkleRoot = getValidRoot();\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(account, share));\\n        if (MerkleProof.verify(proof, claimingMerkleRoot, leaf) == false) {\\n            revert InvalidProof();\\n        }\\n    }\\n\\n    /** External function to start claiming one ore more assets. Proof verification is only done here */\\n    function claim(\\n        address account,\\n        uint256 share,\\n        bytes32[] calldata proof,\\n        address[] calldata assets\\n    ) external {\\n        verifyShares(account, share, proof);\\n\\n        for (uint8 ix = 0; ix < assets.length; ix++) {\\n            _claim(account, share, assets[ix]);\\n        }\\n    }\\n\\n    /** Claiming is always enabled (effectively possible only when a non-zero approved merkleRoot is set) proportional */\\n    function _claim(\\n        address account,\\n        uint256 share,\\n        address asset\\n    ) private {\\n        uint256 reward = rewardsAvailableToClaimer(account, share, asset);\\n\\n        claimed[asset][account] += reward;\\n        totalClaimed[asset] += reward;\\n\\n        transferValueOut(account, reward, asset);\\n\\n        emit Claim(account, share, reward, asset);\\n    }\\n\\n    function setLock(bool _lock) external onlyGuardian {\\n        locked = _lock;\\n    }\\n\\n    function challenge(ChallengeAction action) external onlyGuardian notLocked {\\n        if (pendingMerkleRoot != bytes32(0) && block.timestamp > activationTime) {\\n            revert OnlyInChallengePeriod();\\n        }\\n\\n        pendingMerkleRoot = bytes32(0);\\n        activationTime = type(uint256).max;\\n        if (action == ChallengeAction.CacncelPendingAndLockCurrent) {\\n            this.setLock(true);\\n        } else if (action == ChallengeAction.CancelCampaign) {\\n            this.setLock(true);\\n            approvedMerkleRoot = bytes32(0);\\n        }\\n\\n        emit Challenge(action);\\n    }\\n\\n    function withdrawFunds(address account, address asset) external {\\n        if (locked && approvedMerkleRoot == bytes32(0)) {\\n            uint256 amount = providers[asset][account];\\n            if (amount == 0) {\\n                revert NoFunds();\\n            }\\n            providers[asset][account] = 0;\\n\\n            transferValueOut(account, amount, asset);\\n\\n            emit Withdraw(account, amount, asset);\\n        } else {\\n            revert WithdrawalNotAllowed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3951de2aa2825564809dd99d50e428284e34c431f8c4d39576db56f94fac185f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506116c7806100206000396000f3fe6080604052600436106101695760003560e01c806375e07c2d116100d1578063be8b76861161008a578063d3f3235711610064578063d3f3235714610440578063da4493f614610460578063ef5d9ae814610476578063f3f480d9146104a357600080fd5b8063be8b7686146103e6578063c1d8994114610406578063cf3090121461042657600080fd5b806375e07c2d146103565780637b1837de1461036b5780637dc0d1d01461037e57806385e3f9971461039e5780639637f475146103ba578063a9ec3a1b146103d057600080fd5b806317b9d05e1161012357806317b9d05e1461027057806340bcf74814610290578063452a9320146102c857806360b3710b14610300578063619d519414610320578063717f90921461034057600080fd5b80620fa9fb1461018157806301ab86ec146101a157806303380eb3146101ca5780630c9cbf0e146101ea578063162dfe001461023057806316ccc1331461025057600080fd5b3661017c5761017a346000336104b9565b005b600080fd5b34801561018d57600080fd5b5061017a61019c366004611241565b61056d565b3480156101ad57600080fd5b506003544210155b60405190151581526020015b60405180910390f35b3480156101d657600080fd5b5061017a6101e5366004611334565b610663565b3480156101f657600080fd5b50610222610205366004611241565b600a60209081526000928352604080842090915290825290205481565b6040519081526020016101c1565b34801561023c57600080fd5b5061017a61024b3660046112da565b6106cc565b34801561025c57600080fd5b5061022261026b366004611226565b61077f565b34801561027c57600080fd5b5061017a61028b3660046113f8565b6107b1565b34801561029c57600080fd5b506102226102ab366004611241565b600b60209081526000928352604080842090915290825290205481565b3480156102d457600080fd5b506005546102e8906001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561030c57600080fd5b5061017a61031b36600461141a565b610890565b34801561032c57600080fd5b5061017a61033b3660046113be565b610962565b34801561034c57600080fd5b5061022260045481565b34801561036257600080fd5b506102226109a0565b61017a610379366004611274565b6109c0565b34801561038a57600080fd5b506006546102e8906001600160a01b031681565b3480156103aa57600080fd5b50610222670de0b6b3a764000081565b3480156103c657600080fd5b5061022260025481565b3480156103dc57600080fd5b5061022260015481565b3480156103f257600080fd5b5061022261040136600461129e565b6109e4565b34801561041257600080fd5b50610222610421366004611226565b610a47565b34801561043257600080fd5b506009546101b59060ff1681565b34801561044c57600080fd5b5061017a61045b366004611468565b610adb565b34801561046c57600080fd5b5061022260035481565b34801561048257600080fd5b50610222610491366004611226565b60086020526000908152604090205481565b3480156104af57600080fd5b5061022260075481565b6001600160a01b038083166000908152600b60209081526040808320938516835292905290812080548592906104f0908490611567565b90915550506001600160a01b03821615610519576105196001600160a01b038316823086610c80565b604080516001600160a01b038084168252602082018690528416918101919091527fa5e8482b3a4fbac393476288e591dd9316d7304a537b26f9b67167f0ce19750f906060015b60405180910390a1505050565b60095460ff16801561057f5750600154155b15610646576001600160a01b038082166000908152600b6020908152604080832093861683529290522054806105c85760405163043f9e1160e41b815260040160405180910390fd5b6001600160a01b038083166000908152600b602090815260408083209387168352929052908120556105fb838284610cf1565b604080516001600160a01b038086168252602082018490528416918101919091527f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b290606001610560565b60405163209a769d60e11b815260040160405180910390fd5b5050565b61066f868686866106cc565b60005b60ff81168211156106c3576106b1878785858560ff168181106106975761069761166a565b90506020020160208101906106ac9190611226565b610db8565b806106bb8161161e565b915050610672565b50505050505050565b60006106d66109a0565b6040516bffffffffffffffffffffffff19606088901b1660208201526034810186905290915060009060540160405160208183030381529060405280519060200120905061075a848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250859150610e969050565b610777576040516309bde33960e01b815260040160405180910390fd5b505050505050565b6001600160a01b0381166000908152600860205260408120546107a183610a47565b6107ab9190611567565b92915050565b6006546001600160a01b031633146107dc576040516380fee10560e01b815260040160405180910390fd5b60095460ff1615610800576040516303cb96db60e21b815260040160405180910390fd5b60025415801590610812575060035442105b1561083057604051633420251360e11b815260040160405180910390fd5b600280546001558290556007546108479042611567565b6003819055604080518481526020810184905280820192909252517ff538af40d5ad77456cbcd96a5be317d724e66e0e08eb217c14812308bd43d35e9181900360600190a15050565b600061089c6001610eac565b905080156108b4576000805461ff0019166101001790555b6004859055600580546001600160a01b038087166001600160a01b03199283161790925560068054928616929091169190911790556007829055851561090e5760028690556007546109069042611567565b600355610915565b6000196003555b8015610777576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6005546001600160a01b0316331461098d57604051636570ecab60e11b815260040160405180910390fd5b6009805460ff1916911515919091179055565b60006109ae60035442101590565b6109b9575060015490565b5060025490565b6001600160a01b0382166109d95761065f3483336104b9565b61065f8183336104b9565b6001600160a01b038082166000908152600a60209081526040808320938716835292905290812054670de0b6b3a764000084610a1f8561077f565b610a2991906115a1565b610a33919061157f565b610a3d91906115c0565b90505b9392505050565b60006001600160a01b03821615610ad4576040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015610a9757600080fd5b505afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190611489565b6107ab565b4792915050565b6005546001600160a01b03163314610b0657604051636570ecab60e11b815260040160405180910390fd5b60095460ff1615610b2a576040516303cb96db60e21b815260040160405180910390fd5b60025415801590610b3c575060035442115b15610b5a57604051631b69dd1760e21b815260040160405180910390fd5b60006002556000196003556001816002811115610b7957610b79611654565b1415610bd557604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b50505050610c46565b6002816002811115610be957610be9611654565b1415610c4657604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b158015610c2857600080fd5b505af1158015610c3c573d6000803e3d6000fd5b5050600060015550505b7f0b700a39eebc9d322d0a5829d3d6447d9e000f73a89a7baa6a0fa28a5ec9c8d081604051610c7591906114be565b60405180910390a150565b6040516001600160a01b0380851660248301528316604482015260648101829052610ceb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f39565b50505050565b6001600160a01b038116610d9f576000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610d4c576040519150601f19603f3d011682016040523d82523d6000602084013e610d51565b606091505b5050905080610ceb5760405162461bcd60e51b8152602060048201526015602482015274195d1a195c881d1c985b9cd9995c8819985a5b1959605a1b60448201526064015b60405180910390fd5b610db36001600160a01b038216848461100b565b505050565b6000610dc58484846109e4565b6001600160a01b038084166000908152600a60209081526040808320938916835292905290812080549293508392909190610e01908490611567565b90915550506001600160a01b03821660009081526008602052604081208054839290610e2e908490611567565b90915550610e3f9050848284610cf1565b604080516001600160a01b038681168252602082018690528183018490528416606082015290517fb6fe5ce185a3773d47e919f57c7edfd102c91cb7833b2be405c4de89d9980fd79181900360800190a150505050565b600082610ea3858461103b565b14949350505050565b60008054610100900460ff1615610ef3578160ff166001148015610ecf5750303b155b610eeb5760405162461bcd60e51b8152600401610d9690611519565b506000919050565b60005460ff808416911610610f1a5760405162461bcd60e51b8152600401610d9690611519565b506000805460ff191660ff92909216919091179055600190565b919050565b6000610f8e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110af9092919063ffffffff16565b805190915015610db35780806020019051810190610fac91906113db565b610db35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d96565b6040516001600160a01b038316602482015260448101829052610db390849063a9059cbb60e01b90606401610cb4565b600081815b84518110156110a757600085828151811061105d5761105d61166a565b602002602001015190508083116110835760008381526020829052604090209250611094565b600081815260208490526040902092505b508061109f81611603565b915050611040565b509392505050565b6060610a3d8484600085856001600160a01b0385163b6111115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d96565b600080866001600160a01b0316858760405161112d91906114a2565b60006040518083038185875af1925050503d806000811461116a576040519150601f19603f3d011682016040523d82523d6000602084013e61116f565b606091505b509150915061117f82828661118a565b979650505050505050565b60608315611199575081610a40565b8251156111a95782518084602001fd5b8160405162461bcd60e51b8152600401610d9691906114e6565b80356001600160a01b0381168114610f3457600080fd5b60008083601f8401126111ec57600080fd5b50813567ffffffffffffffff81111561120457600080fd5b6020830191508360208260051b850101111561121f57600080fd5b9250929050565b60006020828403121561123857600080fd5b610a40826111c3565b6000806040838503121561125457600080fd5b61125d836111c3565b915061126b602084016111c3565b90509250929050565b6000806040838503121561128757600080fd5b611290836111c3565b946020939093013593505050565b6000806000606084860312156112b357600080fd5b6112bc846111c3565b9250602084013591506112d1604085016111c3565b90509250925092565b600080600080606085870312156112f057600080fd5b6112f9856111c3565b935060208501359250604085013567ffffffffffffffff81111561131c57600080fd5b611328878288016111da565b95989497509550505050565b6000806000806000806080878903121561134d57600080fd5b611356876111c3565b955060208701359450604087013567ffffffffffffffff8082111561137a57600080fd5b6113868a838b016111da565b9096509450606089013591508082111561139f57600080fd5b506113ac89828a016111da565b979a9699509497509295939492505050565b6000602082840312156113d057600080fd5b8135610a4081611680565b6000602082840312156113ed57600080fd5b8151610a4081611680565b6000806040838503121561140b57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561143257600080fd5b8535945060208601359350611449604087016111c3565b9250611457606087016111c3565b949793965091946080013592915050565b60006020828403121561147a57600080fd5b813560038110610a4057600080fd5b60006020828403121561149b57600080fd5b5051919050565b600082516114b48184602087016115d7565b9190910192915050565b60208101600383106114e057634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526115058160408501602087016115d7565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561157a5761157a61163e565b500190565b60008261159c57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156115bb576115bb61163e565b500290565b6000828210156115d2576115d261163e565b500390565b60005b838110156115f25781810151838201526020016115da565b83811115610ceb5750506000910152565b60006000198214156116175761161761163e565b5060010190565b600060ff821660ff8114156116355761163561163e565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b801515811461168e57600080fd5b5056fea26469706673582212209051829efec1db54507b501a30db90227c84871a1dcbb0b23956e42604a6217164736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101695760003560e01c806375e07c2d116100d1578063be8b76861161008a578063d3f3235711610064578063d3f3235714610440578063da4493f614610460578063ef5d9ae814610476578063f3f480d9146104a357600080fd5b8063be8b7686146103e6578063c1d8994114610406578063cf3090121461042657600080fd5b806375e07c2d146103565780637b1837de1461036b5780637dc0d1d01461037e57806385e3f9971461039e5780639637f475146103ba578063a9ec3a1b146103d057600080fd5b806317b9d05e1161012357806317b9d05e1461027057806340bcf74814610290578063452a9320146102c857806360b3710b14610300578063619d519414610320578063717f90921461034057600080fd5b80620fa9fb1461018157806301ab86ec146101a157806303380eb3146101ca5780630c9cbf0e146101ea578063162dfe001461023057806316ccc1331461025057600080fd5b3661017c5761017a346000336104b9565b005b600080fd5b34801561018d57600080fd5b5061017a61019c366004611241565b61056d565b3480156101ad57600080fd5b506003544210155b60405190151581526020015b60405180910390f35b3480156101d657600080fd5b5061017a6101e5366004611334565b610663565b3480156101f657600080fd5b50610222610205366004611241565b600a60209081526000928352604080842090915290825290205481565b6040519081526020016101c1565b34801561023c57600080fd5b5061017a61024b3660046112da565b6106cc565b34801561025c57600080fd5b5061022261026b366004611226565b61077f565b34801561027c57600080fd5b5061017a61028b3660046113f8565b6107b1565b34801561029c57600080fd5b506102226102ab366004611241565b600b60209081526000928352604080842090915290825290205481565b3480156102d457600080fd5b506005546102e8906001600160a01b031681565b6040516001600160a01b0390911681526020016101c1565b34801561030c57600080fd5b5061017a61031b36600461141a565b610890565b34801561032c57600080fd5b5061017a61033b3660046113be565b610962565b34801561034c57600080fd5b5061022260045481565b34801561036257600080fd5b506102226109a0565b61017a610379366004611274565b6109c0565b34801561038a57600080fd5b506006546102e8906001600160a01b031681565b3480156103aa57600080fd5b50610222670de0b6b3a764000081565b3480156103c657600080fd5b5061022260025481565b3480156103dc57600080fd5b5061022260015481565b3480156103f257600080fd5b5061022261040136600461129e565b6109e4565b34801561041257600080fd5b50610222610421366004611226565b610a47565b34801561043257600080fd5b506009546101b59060ff1681565b34801561044c57600080fd5b5061017a61045b366004611468565b610adb565b34801561046c57600080fd5b5061022260035481565b34801561048257600080fd5b50610222610491366004611226565b60086020526000908152604090205481565b3480156104af57600080fd5b5061022260075481565b6001600160a01b038083166000908152600b60209081526040808320938516835292905290812080548592906104f0908490611567565b90915550506001600160a01b03821615610519576105196001600160a01b038316823086610c80565b604080516001600160a01b038084168252602082018690528416918101919091527fa5e8482b3a4fbac393476288e591dd9316d7304a537b26f9b67167f0ce19750f906060015b60405180910390a1505050565b60095460ff16801561057f5750600154155b15610646576001600160a01b038082166000908152600b6020908152604080832093861683529290522054806105c85760405163043f9e1160e41b815260040160405180910390fd5b6001600160a01b038083166000908152600b602090815260408083209387168352929052908120556105fb838284610cf1565b604080516001600160a01b038086168252602082018490528416918101919091527f56c54ba9bd38d8fd62012e42c7ee564519b09763c426d331b3661b537ead19b290606001610560565b60405163209a769d60e11b815260040160405180910390fd5b5050565b61066f868686866106cc565b60005b60ff81168211156106c3576106b1878785858560ff168181106106975761069761166a565b90506020020160208101906106ac9190611226565b610db8565b806106bb8161161e565b915050610672565b50505050505050565b60006106d66109a0565b6040516bffffffffffffffffffffffff19606088901b1660208201526034810186905290915060009060540160405160208183030381529060405280519060200120905061075a848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250859150610e969050565b610777576040516309bde33960e01b815260040160405180910390fd5b505050505050565b6001600160a01b0381166000908152600860205260408120546107a183610a47565b6107ab9190611567565b92915050565b6006546001600160a01b031633146107dc576040516380fee10560e01b815260040160405180910390fd5b60095460ff1615610800576040516303cb96db60e21b815260040160405180910390fd5b60025415801590610812575060035442105b1561083057604051633420251360e11b815260040160405180910390fd5b600280546001558290556007546108479042611567565b6003819055604080518481526020810184905280820192909252517ff538af40d5ad77456cbcd96a5be317d724e66e0e08eb217c14812308bd43d35e9181900360600190a15050565b600061089c6001610eac565b905080156108b4576000805461ff0019166101001790555b6004859055600580546001600160a01b038087166001600160a01b03199283161790925560068054928616929091169190911790556007829055851561090e5760028690556007546109069042611567565b600355610915565b6000196003555b8015610777576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6005546001600160a01b0316331461098d57604051636570ecab60e11b815260040160405180910390fd5b6009805460ff1916911515919091179055565b60006109ae60035442101590565b6109b9575060015490565b5060025490565b6001600160a01b0382166109d95761065f3483336104b9565b61065f8183336104b9565b6001600160a01b038082166000908152600a60209081526040808320938716835292905290812054670de0b6b3a764000084610a1f8561077f565b610a2991906115a1565b610a33919061157f565b610a3d91906115c0565b90505b9392505050565b60006001600160a01b03821615610ad4576040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b158015610a9757600080fd5b505afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190611489565b6107ab565b4792915050565b6005546001600160a01b03163314610b0657604051636570ecab60e11b815260040160405180910390fd5b60095460ff1615610b2a576040516303cb96db60e21b815260040160405180910390fd5b60025415801590610b3c575060035442115b15610b5a57604051631b69dd1760e21b815260040160405180910390fd5b60006002556000196003556001816002811115610b7957610b79611654565b1415610bd557604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b50505050610c46565b6002816002811115610be957610be9611654565b1415610c4657604051631867546560e21b815260016004820152309063619d519490602401600060405180830381600087803b158015610c2857600080fd5b505af1158015610c3c573d6000803e3d6000fd5b5050600060015550505b7f0b700a39eebc9d322d0a5829d3d6447d9e000f73a89a7baa6a0fa28a5ec9c8d081604051610c7591906114be565b60405180910390a150565b6040516001600160a01b0380851660248301528316604482015260648101829052610ceb9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f39565b50505050565b6001600160a01b038116610d9f576000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610d4c576040519150601f19603f3d011682016040523d82523d6000602084013e610d51565b606091505b5050905080610ceb5760405162461bcd60e51b8152602060048201526015602482015274195d1a195c881d1c985b9cd9995c8819985a5b1959605a1b60448201526064015b60405180910390fd5b610db36001600160a01b038216848461100b565b505050565b6000610dc58484846109e4565b6001600160a01b038084166000908152600a60209081526040808320938916835292905290812080549293508392909190610e01908490611567565b90915550506001600160a01b03821660009081526008602052604081208054839290610e2e908490611567565b90915550610e3f9050848284610cf1565b604080516001600160a01b038681168252602082018690528183018490528416606082015290517fb6fe5ce185a3773d47e919f57c7edfd102c91cb7833b2be405c4de89d9980fd79181900360800190a150505050565b600082610ea3858461103b565b14949350505050565b60008054610100900460ff1615610ef3578160ff166001148015610ecf5750303b155b610eeb5760405162461bcd60e51b8152600401610d9690611519565b506000919050565b60005460ff808416911610610f1a5760405162461bcd60e51b8152600401610d9690611519565b506000805460ff191660ff92909216919091179055600190565b919050565b6000610f8e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110af9092919063ffffffff16565b805190915015610db35780806020019051810190610fac91906113db565b610db35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d96565b6040516001600160a01b038316602482015260448101829052610db390849063a9059cbb60e01b90606401610cb4565b600081815b84518110156110a757600085828151811061105d5761105d61166a565b602002602001015190508083116110835760008381526020829052604090209250611094565b600081815260208490526040902092505b508061109f81611603565b915050611040565b509392505050565b6060610a3d8484600085856001600160a01b0385163b6111115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d96565b600080866001600160a01b0316858760405161112d91906114a2565b60006040518083038185875af1925050503d806000811461116a576040519150601f19603f3d011682016040523d82523d6000602084013e61116f565b606091505b509150915061117f82828661118a565b979650505050505050565b60608315611199575081610a40565b8251156111a95782518084602001fd5b8160405162461bcd60e51b8152600401610d9691906114e6565b80356001600160a01b0381168114610f3457600080fd5b60008083601f8401126111ec57600080fd5b50813567ffffffffffffffff81111561120457600080fd5b6020830191508360208260051b850101111561121f57600080fd5b9250929050565b60006020828403121561123857600080fd5b610a40826111c3565b6000806040838503121561125457600080fd5b61125d836111c3565b915061126b602084016111c3565b90509250929050565b6000806040838503121561128757600080fd5b611290836111c3565b946020939093013593505050565b6000806000606084860312156112b357600080fd5b6112bc846111c3565b9250602084013591506112d1604085016111c3565b90509250925092565b600080600080606085870312156112f057600080fd5b6112f9856111c3565b935060208501359250604085013567ffffffffffffffff81111561131c57600080fd5b611328878288016111da565b95989497509550505050565b6000806000806000806080878903121561134d57600080fd5b611356876111c3565b955060208701359450604087013567ffffffffffffffff8082111561137a57600080fd5b6113868a838b016111da565b9096509450606089013591508082111561139f57600080fd5b506113ac89828a016111da565b979a9699509497509295939492505050565b6000602082840312156113d057600080fd5b8135610a4081611680565b6000602082840312156113ed57600080fd5b8151610a4081611680565b6000806040838503121561140b57600080fd5b50508035926020909101359150565b600080600080600060a0868803121561143257600080fd5b8535945060208601359350611449604087016111c3565b9250611457606087016111c3565b949793965091946080013592915050565b60006020828403121561147a57600080fd5b813560038110610a4057600080fd5b60006020828403121561149b57600080fd5b5051919050565b600082516114b48184602087016115d7565b9190910192915050565b60208101600383106114e057634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600082518060208401526115058160408501602087016115d7565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000821982111561157a5761157a61163e565b500190565b60008261159c57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156115bb576115bb61163e565b500290565b6000828210156115d2576115d261163e565b500390565b60005b838110156115f25781810151838201526020016115da565b83811115610ceb5750506000910152565b60006000198214156116175761161761163e565b5060010190565b600060ff821660ff8114156116355761163561163e565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b801515811461168e57600080fd5b5056fea26469706673582212209051829efec1db54507b501a30db90227c84871a1dcbb0b23956e42604a6217164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Campaign",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "TOTAL_SHARES()": {
        "notice": "Shares are considered a ratio [0-1] with 18 digits where 1E18 = 1 "
      },
      "claim(address,uint256,bytes32[],address[])": {
        "notice": "External function to start claiming one ore more assets. Proof verification is only done here "
      },
      "fund(address,uint256)": {
        "notice": "Fund campaign with ETH or any ERC20 token "
      },
      "getValidRoot()": {
        "notice": "Valid root is either the approved or pending one depending on the activation time "
      },
      "initCampaign(bytes32,bytes32,address,address,uint256)": {
        "notice": "called at deploy (using the campaign factory). It may or may not include a non-zero merkleRoot "
      },
      "locked()": {
        "notice": "Once locked, the merkleRoot cannot be updated anymore. Once locked, it cannot be un-locked  "
      },
      "pendingMerkleRoot()": {
        "notice": "Optimistic flow used to update merkleRoot. - Oracle propose update and Guardian can block - Guardian cannot initiate an update "
      },
      "proposeShares(bytes32,bytes32)": {
        "notice": "Only the oracle can propose new merkleRoot. The proposal is stored and becomes active only after a CHALLENGE_PERIOD "
      },
      "rewardsAvailableToClaimer(address,uint256,address)": {
        "notice": "Validates the shares of an account and computes the available rewards it "
      },
      "totalClaimed(address)": {
        "notice": "Counters of the total amount of funds provided by all providers and claimed by all claimers "
      },
      "totalFundsReceived(address)": {
        "notice": "Total funds received by the contract "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 86,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 89,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1569,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "approvedMerkleRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 1572,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "pendingMerkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1574,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "activationTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1576,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "strategyUri",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1578,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "guardian",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1580,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "oracle",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1582,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "challengePeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1587,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "totalClaimed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1590,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "locked",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 1596,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "claimed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1602,
        "contract": "contracts/Campaign.sol:Campaign",
        "label": "providers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}